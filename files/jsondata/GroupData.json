[
  {
    "Audio Output Devices API": {
      "overview": ["Audio Output Devices API"],
      "methods": [
        "MediaDevices.selectAudioOutput",
        "HTMLMediaElement.setSinkId"
      ],
      "properties": ["HTMLMediaElement.sinkId"],
      "events": []
    },
    "Background Fetch API": {
      "overview": ["Background Fetch API"],
      "interfaces": [
        "BackgroundFetchManager",
        "BackgroundFetchRegistration",
        "BackgroundFetchRecord",
        "BackgroundFetchEvent",
        "BackgroundFetchUpdateUIEvent"
      ],
      "methods": [],
      "properties": ["ServiceWorkerRegistration.backgroundFetch"],
      "events": [
        "ServiceWorkerGlobalScope: backgroundfetchsuccess",
        "ServiceWorkerGlobalScope: backgroundfetchfail",
        "ServiceWorkerGlobalScope: backgroundfetchabort",
        "ServiceWorkerGlobalScope: backgroundfetchclick"
      ]
    },
    "Background Sync": {
      "overview": ["Background Synchronization API"],
      "interfaces": ["SyncManager", "SyncEvent"],
      "methods": [],
      "properties": ["ServiceWorkerRegistration.sync"],
      "events": ["ServiceWorkerGlobalScope: sync"]
    },
    "Background Tasks": {
      "overview": ["Background Tasks API"],
      "interfaces": ["IdleDeadline"],
      "methods": [
        "Window.cancelIdleCallback()",
        "Window.requestIdleCallback()"
      ],
      "properties": [],
      "events": []
    },
    "Badging API": {
      "overview": ["Badging API"],
      "interfaces": [],
      "methods": [
        "Navigator.clearAppBadge()",
        "Navigator.setAppBadge()",
        "WorkerNavigator.clearAppBadge()",
        "WorkerNavigator.setAppBadge()"
      ],
      "properties": [],
      "events": []
    },
    "Battery API": {
      "overview": ["Battery Status API"],
      "guides": [],
      "interfaces": ["BatteryManager"],
      "methods": ["Navigator.getBattery()"],
      "properties": [],
      "events": []
    },
    "Barcode Detection API": {
      "overview": ["Barcode Detection API"],
      "guides": [],
      "interfaces": ["BarcodeDetector"],
      "methods": [],
      "properties": [],
      "events": []
    },
    "Beacon": {
      "overview": ["Beacon API"],
      "guides": [],
      "interfaces": [],
      "methods": ["Navigator.sendBeacon()"],
      "properties": [],
      "events": []
    },
    "Broadcast Channel API": {
      "overview": ["Broadcast Channel API"],
      "interfaces": ["BroadcastChannel"],
      "methods": [],
      "properties": [],
      "events": []
    },
    "Bluetooth API": {
      "overview": ["Web Bluetooth API"],
      "interfaces": [
        "Bluetooth",
        "BluetoothCharacteristicProperties",
        "BluetoothDevice",
        "BluetoothRemoteGATTCharacteristic",
        "BluetoothRemoteGATTDescriptor",
        "BluetoothRemoteGATTServer",
        "BluetoothRemoteGATTService",
        "BluetoothUUID"
      ],
      "methods": [],
      "properties": ["Navigator.bluetooth"],
      "events": []
    },
    "Canvas API": {
      "overview": ["Canvas API"],
      "guides": ["/docs/Web/API/Canvas_API/Manipulating_video_using_canvas"],
      "tutorial": [
        "/docs/Web/API/Canvas_API/Tutorial",
        "/docs/Web/API/Canvas_API/Tutorial/Basic_usage",
        "/docs/Web/API/Canvas_API/Tutorial/Drawing_shapes",
        "/docs/Web/API/Canvas_API/Tutorial/Applying_styles_and_colors",
        "/docs/Web/API/Canvas_API/Tutorial/Drawing_text",
        "/docs/Web/API/Canvas_API/Tutorial/Using_images",
        "/docs/Web/API/Canvas_API/Tutorial/Transformations",
        "/docs/Web/API/Canvas_API/Tutorial/Compositing",
        "/docs/Web/API/Canvas_API/Tutorial/Basic_animations",
        "/docs/Web/API/Canvas_API/Tutorial/Advanced_animations",
        "/docs/Web/API/Canvas_API/Tutorial/Pixel_manipulation_with_canvas",
        "/docs/Web/API/Canvas_API/Tutorial/Optimizing_canvas",
        "/docs/Web/API/Canvas_API/Tutorial/Finale"
      ],
      "interfaces": [
        "CanvasGradient",
        "CanvasPattern",
        "CanvasRenderingContext2D",
        "HTMLCanvasElement",
        "ImageBitmap",
        "ImageBitmapRenderingContext",
        "ImageData",
        "OffscreenCanvas",
        "Path2D",
        "TextMetrics"
      ],
      "methods": ["createImageBitmap()"],
      "properties": [],
      "events": []
    },
    "Channel Messaging API": {
      "overview": ["Channel Messaging API"],
      "guides": ["/docs/Web/API/Channel_Messaging_API/Using_channel_messaging"],
      "interfaces": ["MessageChannel", "MessagePort"],
      "methods": [],
      "properties": [],
      "events": []
    },
    "Clipboard API": {
      "overview": ["Clipboard API"],
      "interfaces": ["Clipboard", "ClipboardEvent", "ClipboardItem"],
      "methods": [],
      "properties": ["Navigator.clipboard"],
      "events": ["Element: copy", "Element: cut", "Element: paste"]
    },
    "Compression Streams API": {
      "overview": ["Compression Streams API"],
      "interfaces": ["CompressionStream", "DecompressionStream"],
      "methods": [],
      "properties": [],
      "events": []
    },
    "Contact Picker API": {
      "overview": ["Contact Picker API"],
      "interfaces": ["ContactAddress", "ContactsManager"],
      "methods": [],
      "properties": ["Navigator.contacts"],
      "events": []
    },
    "Content Index API": {
      "overview": ["Content Index API"],
      "interfaces": ["ContentIndex", "ContentIndexEvent"],
      "methods": [],
      "properties": ["ServiceWorkerRegistration.index"],
      "events": ["ServiceWorkerGlobalScope: contentdelete"]
    },
    "CSS Containment": {
      "interfaces": ["ContentVisibilityAutoStateChangeEvent"],
      "methods": [],
      "properties": [],
      "events": ["Element: contentvisibilityautostatechange"]
    },
    "CSS Custom Highlight API": {
      "overview": ["CSS Custom Highlight API"],
      "interfaces": ["Highlight", "HighlightRegistry"],
      "methods": [],
      "properties": ["CSS.highlights"],
      "events": []
    },
    "Console API": {
      "overview": ["Console API"],
      "interfaces": ["console"],
      "methods": [],
      "properties": ["Window.console"],
      "events": []
    },
    "Cookie Store API": {
      "overview": ["Cookie Store API"],
      "interfaces": [
        "CookieStore",
        "CookieStoreManager",
        "CookieChangeEvent",
        "ExtendableCookieChangeEvent"
      ],
      "methods": [],
      "properties": [
        "Window.cookieStore",
        "ServiceWorkerGlobalScope.cookieStore",
        "ServiceWorkerRegistration.cookies"
      ],
      "events": ["ServiceWorkerGlobalScope: cookiechange"]
    },
    "Credential Management API": {
      "overview": ["Credential Management API"],
      "interfaces": [
        "Credential",
        "CredentialsContainer",
        "FederatedCredential",
        "OTPCredential",
        "PasswordCredential",
        "PublicKeyCredential"
      ],
      "methods": [],
      "properties": [],
      "events": []
    },
    "CSS Counter Styles": {
      "overview": ["CSS Counter Styles"],
      "interfaces": ["CSSCounterStyleRule"],
      "methods": [],
      "properties": [],
      "events": []
    },
    "CSS Font Loading API": {
      "overview": ["CSS Font Loading API"],
      "interfaces": ["FontFace", "FontFaceSet", "FontFaceSetLoadEvent"],
      "methods": [],
      "properties": ["Document.fonts", "WorkerGlobalScope.fonts"],
      "events": [
        "FontFaceSet: loading",
        "FontFaceSet: loadingdone",
        "FontFaceSet: loadingerror"
      ]
    },
    "CSS Painting API": {
      "overview": ["CSS Painting API"],
      "guides": ["/docs/Web/API/CSS_Painting_API/Guide"],
      "interfaces": [
        "PaintWorkletGlobalScope",
        "PaintRenderingContext2D",
        "PaintSize"
      ],
      "methods": ["CSS.paintWorklet"],
      "properties": [],
      "events": []
    },
    "CSS Properties and Values API": {
      "overview": ["CSS Properties and Values API"],
      "guides": ["/docs/Web/API/CSS_Properties_and_Values_API/guide"],
      "interfaces": ["CSSPropertyRule"],
      "methods": ["CSS.registerProperty"],
      "properties": [],
      "events": []
    },
    "CSS Typed Object Model API": {
      "overview": ["CSS Typed OM API"],
      "guides": ["/docs/Web/API/CSS_Typed_OM_API/Guide"],
      "interfaces": [
        "CSSKeywordValue",
        "CSSImageValue",
        "CSSNumericValue",
        "CSSStyleValue",
        "CSSPositionValue",
        "CSSTransformValue",
        "CSSUnparsedValue",
        "StylePropertyMap"
      ],
      "methods": [],
      "properties": [],
      "events": []
    },
    "CSSOM": {
      "overview": ["CSS Object Model"],
      "guides": [
        "/docs/Web/API/CSS_Object_Model/Determining_the_dimensions_of_elements",
        "/docs/Web/API/CSS_Object_Model/Managing_screen_orientation",
        "/docs/Web/API/CSS_Object_Model/Using_dynamic_styling_information"
      ],
      "interfaces": [
        "CaretPosition",
        "CSS",
        "CSSConditionRule",
        "CSSGroupingRule",
        "CSSImportRule",
        "CSSKeyframeRule",
        "CSSKeyframesRule",
        "CSSLayerBlockRule",
        "CSSLayerStatementRule",
        "CSSMediaRule",
        "CSSNamespaceRule",
        "CSSPageRule",
        "CSSFontFeatureValuesRule",
        "CSSFontPaletteValuesRule",
        "CSSPropertyRule",
        "CSSRule",
        "CSSRuleList",
        "CSSStyleDeclaration",
        "CSSStartingStyleRule",
        "CSSStyleRule",
        "CSSStyleSheet",
        "CSSSupportsRule",
        "MediaList",
        "MediaQueryList",
        "Screen",
        "StyleSheet",
        "StyleSheetList"
      ],
      "methods": [],
      "properties": [],
      "events": [
        "Document: scroll",
        "Element: animationstart",
        "Element: animationend",
        "Element: animationiteration",
        "Element: scroll",
        "Element: transitionend",
        "Window: resize"
      ]
    },
    "Device Memory API": {
      "overview": ["Device Memory API"],
      "guides": [],
      "interfaces": [],
      "methods": [],
      "properties": ["Navigator.deviceMemory", "WorkerNavigator.deviceMemory"],
      "events": []
    },
    "Device Orientation Events": {
      "overview": ["Device orientation events"],
      "guides": [
        "/docs/Web/API/Device_orientation_events/Detecting_device_orientation",
        "/docs/Web/API/Device_orientation_events/Orientation_and_motion_data_explained",
        "/docs/Web/API/Device_orientation_events/Using_device_orientation_with_3D_transforms"
      ],
      "interfaces": [
        "DeviceMotionEvent",
        "DeviceMotionEventAcceleration",
        "DeviceMotionEventRotationRate",
        "DeviceOrientationEvent"
      ],
      "methods": [],
      "properties": [],
      "events": [
        "Window: deviceorientation",
        "Window: deviceorientationabsolute",
        "Window: devicemotion"
      ]
    },
    "Document Picture-in-Picture API": {
      "overview": ["Document Picture-in-Picture API"],
      "guides": ["/docs/Web/API/Document_Picture-in-Picture_API/Using"],
      "interfaces": [
        "DocumentPictureInPicture",
        "DocumentPictureInPictureEvent"
      ],
      "methods": [],
      "properties": ["Window.documentPictureInPicture"],
      "events": ["DocumentPictureInPicture: enter"]
    },
    "DOM": {
      "overview": ["Document Object Model"],
      "guides": [
        "/docs/Web/API/Document_Object_Model/Introduction",
        "/docs/Web/API/Document_object_model/Using_the_W3C_DOM_Level_1_Core",
        "/docs/Web/API/Document_Object_Model/Traversing_an_HTML_table_with_JavaScript_and_DOM_Interfaces",
        "/docs/Web/API/Document_object_model/Locating_DOM_elements_using_selectors",
        "/docs/Web/API/Document_object_model/How_to_create_a_DOM_tree",
        "/docs/Web/API/Document_Object_Model/Events",
        "/docs/Web/API/Document_Object_Model/Whitespace_in_the_DOM",
        "/docs/Web/API/Document_Object_Model/Examples"
      ],
      "interfaces": [
        "AbortController",
        "AbortSignal",
        "AbstractRange",
        "Attr",
        "CDATASection",
        "CharacterData",
        "Comment",
        "CustomEvent",
        "Document",
        "DocumentFragment",
        "DocumentType",
        "DOMError",
        "DOMException",
        "DOMImplementation",
        "DOMParser",
        "DOMPoint",
        "DOMPointReadOnly",
        "DOMRect",
        "DOMTokenList",
        "Element",
        "Event",
        "EventTarget",
        "HTMLCollection",
        "MutationObserver",
        "MutationRecord",
        "NamedNodeMap",
        "Node",
        "NodeIterator",
        "NodeList",
        "ProcessingInstruction",
        "Range",
        "StaticRange",
        "Text",
        "TextDecoder",
        "TextEncoder",
        "TimeRanges",
        "TreeWalker",
        "XMLDocument"
      ],
      "methods": [],
      "properties": [],
      "events": []
    },
    "EditContext API": {
      "overview": ["EditContext API"],
      "interfaces": [
        "EditContext",
        "TextFormat",
        "TextUpdateEvent",
        "TextFormatUpdateEvent",
        "CharacterBoundsUpdateEvent"
      ],
      "methods": [],
      "properties": [],
      "events": []
    },
    "Encoding API": {
      "overview": ["Encoding API"],
      "guides": ["/docs/Web/API/Encoding_API/Encodings"],
      "interfaces": [
        "TextDecoder",
        "TextEncoder",
        "TextDecoderStream",
        "TextEncoderStream"
      ],
      "methods": [],
      "properties": [],
      "events": []
    },
    "Encrypted Media Extensions": {
      "overview": ["Encrypted Media Extensions API"],
      "interfaces": [
        "MediaEncryptedEvent",
        "MediaKeyMessageEvent",
        "MediaKeys",
        "MediaKeySession",
        "MediaKeyStatusMap",
        "MediaKeySystemAccess"
      ],
      "methods": [
        "Navigator.requestMediaKeySystemAccess()",
        "HTMLMediaElement.setMediaKeys()"
      ],
      "properties": ["HTMLMediaElement.mediaKeys"],
      "events": ["HTMLMediaElement: encrypted"]
    },
    "EyeDropper API": {
      "overview": ["EyeDropper API"],
      "interfaces": ["EyeDropper"],
      "methods": [],
      "properties": [],
      "events": []
    },
    "FedCM API": {
      "overview": ["FedCM API"],
      "interfaces": ["IdentityCredential", "IdentityProvider"],
      "methods": ["CredentialsContainer.get()"],
      "properties": [],
      "events": []
    },
    "Fetch API": {
      "overview": ["Fetch API"],
      "guides": [
        "/docs/Web/API/Fetch_API/Using_Fetch",
        "/docs/Web/API/Fetch_API/Basic_concepts",
        "/docs/Web/API/Fetch_API/Cross-global_fetch_usage"
      ],
      "interfaces": ["Headers", "Request", "Response"],
      "methods": ["fetch()"],
      "properties": [],
      "events": []
    },
    "File API": {
      "overview": ["File API"],
      "guides": ["/docs/Web/API/File_API/Using_files_from_web_applications"],
      "interfaces": [
        "Blob",
        "File",
        "FileList",
        "FileReader",
        "FileReaderSync"
      ],
      "methods": [],
      "properties": [],
      "events": []
    },
    "File and Directory Entries API": {
      "overview": ["File and Directory Entries API"],
      "guides": [
        "/docs/Web/API/File_and_Directory_Entries_API/Introduction",
        "/docs/Web/API/File_and_Directory_Entries_API/Firefox_support"
      ],
      "interfaces": [
        "FileSystemDirectoryEntry",
        "FileSystemDirectoryReader",
        "FileSystemEntry",
        "FileSystemFileEntry",
        "FileSystem"
      ],
      "methods": [],
      "properties": [],
      "events": []
    },
    "File System API": {
      "overview": ["File System API"],
      "guides": ["/docs/Web/API/File_System_API/Origin_private_file_system"],
      "interfaces": [
        "FileSystemHandle",
        "FileSystemFileHandle",
        "FileSystemDirectoryHandle",
        "FileSystemSyncAccessHandle",
        "FileSystemWritableFileStream"
      ],
      "methods": [
        "window.showOpenFilePicker()",
        "window.showSaveFilePicker()",
        "window.showDirectoryPicker()",
        "DataTransferItem.getAsFileSystemHandle()",
        "StorageManager.getDirectory()"
      ],
      "properties": [],
      "events": []
    },
    "Force Touch Events": {
      "overview": ["Force Touch Events"],
      "guides": [],
      "interfaces": [],
      "methods": [],
      "properties": [
        "MouseEvent.webkitForce",
        "MouseEvent.WEBKIT_FORCE_AT_FORCE_MOUSE_DOWN",
        "MouseEvent.WEBKIT_FORCE_AT_MOUSE_DOWN"
      ],
      "events": [
        "Element: webkitmouseforcewillbegin",
        "Element: webkitmouseforcedown",
        "Element: webkitmouseforceup",
        "Element: webkitmouseforcechanged"
      ]
    },
    "Fullscreen API": {
      "overview": ["Fullscreen API"],
      "guides": ["/docs/Web/API/Fullscreen_API/Guide"],
      "interfaces": [],
      "methods": ["Document.exitFullscreen()", "Element.requestFullscreen()"],
      "properties": ["Document.fullscreen", "Document.fullscreenElement"],
      "events": [
        "Document: fullscreenchange",
        "Document: fullscreenerror",
        "Element: fullscreenchange",
        "Element: fullscreenerror"
      ]
    },
    "Gamepad API": {
      "overview": ["Gamepad API"],
      "guides": [
        "/docs/Web/API/Gamepad_API/Using_the_Gamepad_API",
        "/docs/Games/Techniques/Controls_Gamepad_API"
      ],
      "interfaces": ["Gamepad", "GamepadButton", "GamepadEvent"],
      "methods": ["Navigator.getGamepads()"],
      "properties": [],
      "events": ["Window: gamepadconnected", "Window: gamepaddisconnected"]
    },
    "Geolocation API": {
      "overview": ["Geolocation API"],
      "guides": ["/docs/Web/API/Geolocation_API/Using_the_Geolocation_API"],
      "interfaces": [
        "Geolocation",
        "GeolocationCoordinates",
        "GeolocationPosition",
        "GeolocationPositionError"
      ],
      "methods": [],
      "properties": ["Navigator.geolocation"],
      "events": []
    },
    "Geometry Interfaces": {
      "overview": ["Geometry interfaces"],
      "interfaces": [
        "DOMMatrix",
        "DOMMatrixReadOnly",
        "DOMPoint",
        "DOMPointReadOnly",
        "DOMQuad",
        "DOMRect",
        "DOMRectReadOnly"
      ],
      "methods": [],
      "properties": [],
      "events": []
    },
    "History API": {
      "overview": ["History API"],
      "guides": ["/docs/Web/API/History_API/Working_with_the_History_API"],
      "interfaces": ["History", "PopStateEvent"],
      "methods": [],
      "properties": ["Window.history"],
      "events": ["Window: popstate"]
    },
    "Houdini API": {
      "overview": ["Houdini APIs"],
      "guides": [
        "/docs/Web/API/CSS_Properties_and_Values_API/guide",
        "/docs/Web/API/CSS_Typed_OM_API/Guide",
        "/docs/Web/API/CSS_Painting_API/Guide"
      ],
      "interfaces": [
        "CSSImageValue",
        "CSSKeywordValue",
        "CSSMathValue",
        "CSSNumericValue",
        "CSSPositionValue",
        "CSSStyleValue",
        "CSSTransformValue",
        "CSSUnitValue",
        "CSSUnparsedValue",
        "PaintWorkletGlobalScope",
        "StylePropertyMap",
        "Worklet"
      ],
      "methods": ["CSS.registerProperty", "Worklet.addModule"],
      "properties": [],
      "events": []
    },
    "HTML DOM": {
      "overview": ["HTML DOM API"],
      "interfaces": [
        "BeforeUnloadEvent",
        "DOMStringMap",
        "ErrorEvent",
        "HashChangeEvent",
        "ImageData",
        "HTMLAnchorElement",
        "HTMLAreaElement",
        "HTMLAudioElement",
        "HTMLBaseElement",
        "HTMLBodyElement",
        "HTMLBRElement",
        "HTMLButtonElement",
        "HTMLCanvasElement",
        "HTMLDataElement",
        "HTMLDataListElement",
        "HTMLDialogElement",
        "HTMLDivElement",
        "HTMLDListElement",
        "HTMLDocument",
        "HTMLElement",
        "HTMLEmbedElement",
        "HTMLFieldSetElement",
        "HTMLFormControlsCollection",
        "HTMLFormElement",
        "HTMLFrameSetElement",
        "HTMLHeadElement",
        "HTMLHeadingElement",
        "HTMLHRElement",
        "HTMLHtmlElement",
        "HTMLIFrameElement",
        "HTMLImageElement",
        "HTMLInputElement",
        "HTMLLabelElement",
        "HTMLLegendElement",
        "HTMLLIElement",
        "HTMLLinkElement",
        "HTMLMapElement",
        "HTMLMediaElement",
        "HTMLMenuElement",
        "HTMLMetaElement",
        "HTMLMeterElement",
        "HTMLModElement",
        "HTMLObjectElement",
        "HTMLOListElement",
        "HTMLOptGroupElement",
        "HTMLOptionElement",
        "HTMLOptionsCollection",
        "HTMLOutputElement",
        "HTMLParagraphElement",
        "HTMLPictureElement",
        "HTMLPreElement",
        "HTMLProgressElement",
        "HTMLQuoteElement",
        "HTMLScriptElement",
        "HTMLSelectElement",
        "HTMLSourceElement",
        "HTMLSpanElement",
        "HTMLStyleElement",
        "HTMLTableCaptionElement",
        "HTMLTableCellElement",
        "HTMLTableColElement",
        "HTMLTableElement",
        "HTMLTableRowElement",
        "HTMLTableSectionElement",
        "HTMLTextAreaElement",
        "HTMLTemplateElement",
        "HTMLTimeElement",
        "HTMLTitleElement",
        "HTMLTrackElement",
        "HTMLUListElement",
        "HTMLUnknownElement",
        "HTMLVideoElement",
        "History",
        "Location",
        "MessageChannel",
        "MessageEvent",
        "MessagePort",
        "Navigator",
        "PageTransitionEvent",
        "Plugin",
        "PluginArray",
        "PromiseRejectionEvent",
        "RadioNodeList",
        "UserActivation",
        "ValidityState",
        "Window",
        "WorkletGlobalScope"
      ],
      "methods": [],
      "properties": [],
      "events": [
        "Document: DOMContentLoaded",
        "Document: readystatechange",
        "Element: afterscriptexecute",
        "Element: auxclick",
        "Element: beforescriptexecute",
        "Element: blur",
        "Element: click",
        "Element: contextmenu",
        "Element: DOMActivate",
        "Element: focus",
        "Element: select",
        "Element: show",
        "HTMLDetailsElement: toggle",
        "HTMLDialogElement: cancel",
        "HTMLDialogElement: close",
        "HTMLElement: input",
        "HTMLFormElement: reset",
        "HTMLFormElement: submit",
        "HTMLInputElement: change",
        "HTMLInputElement: invalid",
        "HTMLMediaElement: abort",
        "HTMLMediaElement: canplay",
        "HTMLMediaElement: canplaythrough",
        "HTMLMediaElement: durationchange",
        "HTMLMediaElement: emptied",
        "HTMLMediaElement: error",
        "HTMLMediaElement: loadeddata",
        "HTMLMediaElement: loadedmetadata",
        "HTMLMediaElement: loadstart",
        "HTMLMediaElement: play",
        "HTMLMediaElement: playing",
        "HTMLMediaElement: progress",
        "HTMLMediaElement: seeked",
        "HTMLMediaElement: seeking",
        "HTMLMediaElement: stalled",
        "HTMLMediaElement: suspend",
        "HTMLMediaElement: timeupdate",
        "HTMLMediaElement: volumechange",
        "HTMLMediaElement: waiting",
        "Window: afterprint",
        "Window: beforeprint",
        "Window: beforeunload",
        "Window: hashchange",
        "Window: languagechange",
        "Window: load",
        "Window: message",
        "Window: offline",
        "Window: online",
        "Window: pagehide",
        "Window: pageshow",
        "Window: rejectionhandled",
        "Window: storage",
        "Window: unload",
        "Window: unhandledrejection"
      ]
    },
    "HTML Drag and Drop API": {
      "overview": ["HTML Drag and Drop API"],
      "guides": [
        "/docs/Web/API/HTML_Drag_and_Drop_API/File_drag_and_drop",
        "/docs/Web/API/HTML_Drag_and_Drop_API/Drag_operations",
        "/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types"
      ],
      "interfaces": [
        "DataTransfer",
        "DataTransferItem",
        "DataTransferItemList",
        "DragEvent"
      ],
      "methods": [],
      "properties": [],
      "events": [
        "HTMLElement: drag",
        "HTMLElement: dragend",
        "HTMLElement: dragenter",
        "HTMLElement: dragleave",
        "HTMLElement: dragover",
        "HTMLElement: dragstart",
        "HTMLElement: drop"
      ]
    },
    "HTML Sanitizer API": {
      "overview": ["HTML Sanitizer API"],
      "interfaces": ["Sanitizer"],
      "methods": [],
      "properties": [],
      "events": []
    },
    "Idle Detection API": {
      "overview": ["Idle Detection API"],
      "interfaces": ["IdleDetector"],
      "methods": [],
      "properties": [],
      "events": []
    },
    "Image Capture API": {
      "overview": ["MediaStream Image Capture API"],
      "interfaces": ["ImageCapture"],
      "methods": [],
      "properties": [],
      "events": []
    },
    "IndexedDB": {
      "overview": ["IndexedDB API"],
      "guides": [
        "/docs/Web/API/IndexedDB_API/Using_IndexedDB",
        "/docs/Web/API/IndexedDB_API/Basic_Concepts_Behind_IndexedDB",
        "/docs/Web/API/IndexedDB_API/Browser_storage_limits_and_eviction_criteria",
        "/docs/Web/API/IndexedDB_API/Checking_when_a_deadline_is_due"
      ],
      "interfaces": [
        "IDBCursor",
        "IDBCursorWithValue",
        "IDBDatabase",
        "IDBFactory",
        "IDBIndex",
        "IDBKeyRange",
        "IDBObjectStore",
        "IDBOpenDBRequest",
        "IDBRequest",
        "IDBTransaction",
        "IDBVersionChangeEvent"
      ],
      "methods": [],
      "properties": ["indexedDB"],
      "events": []
    },
    "Ink API": {
      "overview": ["Ink API"],
      "interfaces": ["Ink", "InkPresenter"],
      "methods": [],
      "properties": ["Navigator.ink"],
      "events": []
    },
    "Input Device Capabilities API": {
      "overview": ["InputDeviceCapabilities API"],
      "guides": [],
      "interfaces": ["InputDeviceCapabilities"],
      "methods": [],
      "properties": ["UIEvent.sourceCapabilities"],
      "events": []
    },
    "Insertable Streams for MediaStreamTrack API": {
      "overview": ["Insertable Streams for MediaStreamTrack API"],
      "guides": [],
      "interfaces": ["MediaStreamTrackGenerator", "MediaStreamTrackProcessor"],
      "methods": [],
      "properties": [],
      "events": []
    },
    "Intersection Observer API": {
      "overview": ["Intersection Observer API"],
      "guides": [
        "/docs/Web/API/Intersection_Observer_API/Timing_element_visibility"
      ],
      "interfaces": ["IntersectionObserver", "IntersectionObserverEntry"],
      "methods": [],
      "properties": [],
      "events": []
    },
    "Keyboard API": {
      "overview": ["Keyboard API"],
      "interfaces": ["Keyboard", "KeyboardLayoutMap"],
      "methods": ["Navigator.keyboard"]
    },
    "Launch Handler API": {
      "overview": ["Launch Handler API"],
      "interfaces": ["LaunchParams", "LaunchQueue"],
      "methods": [],
      "properties": ["Window.launchQueue"],
      "events": []
    },
    "Local Font Access API": {
      "overview": ["Local Font Access API"],
      "interfaces": ["FontData"],
      "methods": ["Window.queryLocalFonts()"],
      "properties": [],
      "events": []
    },
    "Media Capabilities API": {
      "overview": ["Media Capabilities API"],
      "guides": [
        "/docs/Web/API/Media_Capabilities_API/Using_the_Media_Capabilities_API"
      ],
      "interfaces": ["MediaCapabilities", "Screen"],
      "methods": [
        "MediaCapabilities.decodingInfo()",
        "MediaCapabilities.encodingInfo()"
      ],
      "properties": ["Navigator.mediaCapabilities"],
      "events": []
    },
    "Media Capture and Streams": {
      "overview": ["Media Capture and Streams API"],
      "guides": [
        "/docs/Web/API/Media_Capture_and_Streams_API/Constraints",
        "/docs/Web/API/Media_Capture_and_Streams_API/Taking_still_photos"
      ],
      "interfaces": [
        "CanvasCaptureMediaStreamTrack",
        "InputDeviceInfo",
        "MediaDeviceInfo",
        "MediaDevices",
        "MediaStream",
        "MediaStreamTrack",
        "MediaStreamTrackEvent",
        "MediaTrackConstraints",
        "MediaTrackSettings",
        "MediaTrackSupportedConstraints",
        "OverconstrainedError"
      ],
      "methods": [
        "HTMLCanvasElement.captureStream()",
        "HTMLMediaElement.captureStream()"
      ],
      "properties": ["Navigator.mediaDevices"],
      "events": []
    },
    "Media Session API": {
      "overview": ["Media Session API"],
      "guides": [],
      "interfaces": ["MediaMetadata", "MediaSession"],
      "methods": [],
      "properties": ["Navigator.mediaSession"],
      "events": []
    },
    "Media Source Extensions": {
      "overview": ["Media Source Extensions API"],
      "interfaces": [
        "MediaSource",
        "MediaSourceHandle",
        "SourceBuffer",
        "SourceBufferList",
        "VideoPlaybackQuality"
      ],
      "methods": ["HTMLVideoElement.getVideoPlaybackQuality()"],
      "properties": ["VideoTrack.sourceBuffer", "TextTrack.sourceBuffer"],
      "events": []
    },
    "MediaStream Recording": {
      "overview": ["MediaStream Recording API"],
      "guides": [
        "/docs/Web/API/MediaStream_Recording_API/Using_the_MediaStream_Recording_API",
        "/docs/Web/API/MediaStream_Recording_API/Recording_a_media_element"
      ],
      "interfaces": ["MediaRecorder", "MediaRecorderErrorEvent", "BlobEvent"],
      "methods": [],
      "properties": [],
      "events": []
    },
    "Navigation API": {
      "overview": ["Navigation API"],
      "guides": [],
      "interfaces": [
        "NavigateEvent",
        "Navigation",
        "NavigationCurrentEntryChangeEvent",
        "NavigationDestination",
        "NavigationHistoryEntry",
        "NavigationTransition"
      ],
      "methods": [],
      "properties": ["Window.navigation"],
      "events": []
    },
    "Network Information API": {
      "overview": ["Network Information API"],
      "interfaces": ["NetworkInformation"],
      "methods": [],
      "properties": ["Navigator.connection"],
      "events": []
    },
    "Page Visibility API": {
      "overview": ["Page Visibility API"],
      "interfaces": [],
      "methods": [],
      "properties": ["Document.hidden", "Document.visibilityState"],
      "events": ["Document: visibilitychange"]
    },
    "Payment Handler API": {
      "overview": ["Payment Handler API"],
      "interfaces": [
        "CanMakePaymentEvent",
        "PaymentManager",
        "PaymentRequestEvent"
      ],
      "methods": [],
      "properties": ["ServiceWorkerRegistration.paymentManager"],
      "events": [
        "ServiceWorkerGlobalScope: canmakepayment",
        "ServiceWorkerGlobalScope: paymentrequest"
      ]
    },
    "Payment Request API": {
      "overview": ["Payment Request API"],
      "guides": [
        "/docs/Web/API/Payment_Request_API/Using_the_Payment_Request_API",
        "/docs/Web/API/Payment_Request_API/Concepts",
        "/docs/Web/API/Payment_Request_API/Using_secure_payment_confirmation"
      ],
      "interfaces": [
        "MerchantValidationEvent",
        "PaymentAddress",
        "PaymentMethodChangeEvent",
        "PaymentRequest",
        "PaymentRequestUpdateEvent",
        "PaymentResponse",
        "SecurePaymentConfirmationRequest"
      ],
      "methods": [],
      "properties": ["HTMLIFrameElement.allowPaymentRequest"],
      "events": []
    },
    "Performance API": {
      "overview": ["Performance API"],
      "guides": [
        "/docs/Web/API/Performance_API/Performance_data",
        "/docs/Web/API/Performance_API/High_precision_timing",
        "/docs/Web/API/Performance_API/Resource_timing",
        "/docs/Web/API/Performance_API/Navigation_timing",
        "/docs/Web/API/Performance_API/User_timing",
        "/docs/Web/API/Performance_API/Server_timing"
      ],
      "interfaces": [
        "EventCounts",
        "LargestContentfulPaint",
        "LayoutShift",
        "LayoutShiftAttribution",
        "Performance",
        "PerformanceEntry",
        "PerformanceElementTiming",
        "PerformanceEventTiming",
        "PerformanceLongTaskTiming",
        "PerformanceMark",
        "PerformanceMeasure",
        "PerformanceNavigation",
        "PerformanceNavigationTiming",
        "PerformanceObserver",
        "PerformanceObserverEntryList",
        "PerformancePaintTiming",
        "PerformanceResourceTiming",
        "PerformanceServerTiming",
        "PerformanceTiming",
        "TaskAttributionTiming",
        "VisibilityStateEntry"
      ],
      "methods": [],
      "properties": ["performance_property"],
      "events": []
    },
    "Periodic Background Sync": {
      "overview": ["Web Periodic Background Synchronization API"],
      "interfaces": ["PeriodicSyncEvent", "PeriodicSyncManager"],
      "methods": [],
      "properties": ["ServiceWorkerRegistration.periodicSync"],
      "events": ["ServiceWorkerGlobalScope: periodicsync"]
    },
    "Permissions API": {
      "overview": ["Permissions API"],
      "guides": ["/docs/Web/API/Permissions_API/Using_the_Permissions_API"],
      "interfaces": ["Permissions", "PermissionStatus"],
      "methods": [],
      "properties": ["Navigator.permissions", "WorkerNavigator.permissions"],
      "events": []
    },
    "Picture-in-Picture API": {
      "overview": ["Picture-in-Picture API"],
      "guides": ["/docs/Web/API/Picture-in-Picture_API/Guide"],
      "interfaces": ["PictureInPictureWindow"],
      "methods": [
        "HTMLVideoElement.requestPictureInPicture()",
        "Document.exitPictureInPicture()"
      ],
      "properties": [
        "HTMLVideoElement.disablePictureInPicture",
        "Document.pictureInPictureEnabled",
        "Document.pictureInPictureElement"
      ],
      "events": [
        "HTMLVideoElement: enterpictureinpicture",
        "HTMLVideoElement: leavepictureinpicture",
        "PictureInPictureWindow: resize"
      ]
    },
    "Pointer Events": {
      "overview": ["Pointer events"],
      "guides": [
        "/docs/Web/API/Pointer_events/Using_Pointer_Events",
        "/docs/Web/API/Pointer_events/Multi-touch_interaction",
        "/docs/Web/API/Pointer_events/Pinch_zoom_gestures"
      ],
      "interfaces": ["PointerEvent"],
      "methods": [
        "Element.hasPointerCapture()",
        "Element.releasePointerCapture()",
        "Element.setPointerCapture()"
      ],
      "properties": ["Navigator.maxTouchPoints"],
      "events": [
        "Element: gotpointercapture",
        "Element: lostpointercapture",
        "Element: pointercancel",
        "Element: pointerdown",
        "Element: pointerenter",
        "Element: pointerleave",
        "Element: pointermove",
        "Element: pointerout",
        "Element: pointerover",
        "Element: pointerrawupdate",
        "Element: pointerup"
      ]
    },
    "Pointer Lock API": {
      "overview": ["Pointer Lock API"],
      "interfaces": [],
      "methods": ["Element.requestPointerLock()", "Document.exitPointerLock()"],
      "properties": [
        "Document.pointerLockElement",
        "MouseEvent.movementX",
        "MouseEvent.movementY",
        "ShadowRoot.pointerLockElement"
      ],
      "events": ["Document: pointerlockchange", "Document: pointerlockerror"]
    },
    "Popover API": {
      "overview": ["Popover API"],
      "guides": ["/docs/Web/API/Popover_API/Using"],
      "interfaces": ["ToggleEvent"],
      "methods": [
        "HTMLElement.hidePopover()",
        "HTMLElement.showPopover()",
        "HTMLElement.togglePopover()"
      ],
      "properties": [
        "HTMLButtonElement.popoverTargetAction",
        "HTMLButtonElement.popoverTargetElement",
        "HTMLElement.popover",
        "HTMLInputElement.popoverTargetAction",
        "HTMLInputElement.popoverTargetElement"
      ],
      "events": ["HTMLElement: beforetoggle", "HTMLElement: toggle"]
    },
    "Presentation API": {
      "overview": ["Presentation API"],
      "interfaces": [
        "Presentation",
        "PresentationAvailability",
        "PresentationDeviceInfoManager",
        "PresentationRequest",
        "PresentationSession",
        "PresentationSessionConnectEvent"
      ],
      "methods": [],
      "properties": [
        "Navigator.presentation",
        "Navigator.mozPresentationDeviceInfo"
      ],
      "events": []
    },
    "Prioritized Task Scheduling API": {
      "overview": ["Prioritized Task Scheduling API"],
      "guides": [],
      "interfaces": [
        "Scheduler",
        "Scheduling",
        "TaskController",
        "TaskSignal",
        "TaskPriorityChangeEvent"
      ],
      "methods": [],
      "properties": ["Navigator.scheduling", "scheduler_property"],
      "events": []
    },
    "Push API": {
      "overview": ["Push API"],
      "guides": ["/docs/Web/API/Push_API/Best_Practices"],
      "interfaces": [
        "PushManager",
        "PushSubscription",
        "PushEvent",
        "PushMessageData"
      ],
      "methods": [],
      "properties": ["ServiceWorkerRegistration.pushManager"],
      "events": [
        "ServiceWorkerGlobalScope: push",
        "ServiceWorkerGlobalScope: pushsubscriptionchange"
      ]
    },
    "Remote Playback API": {
      "overview": ["Remote Playback API"],
      "guides": [],
      "interfaces": ["RemotePlayback"],
      "methods": [],
      "properties": [
        "HTMLMediaElement.disableRemotePlayback",
        "HTMLMediaElement.remote"
      ],
      "events": []
    },
    "Reporting API": {
      "overview": ["Reporting API"],
      "guides": [],
      "interfaces": [
        "CSPViolationReportBody",
        "DeprecationReportBody",
        "InterventionReportBody",
        "Report",
        "ReportBody",
        "ReportError",
        "ReportingObserver"
      ],
      "methods": [],
      "properties": [],
      "events": []
    },
    "Resize Observer API": {
      "overview": ["Resize Observer API"],
      "interfaces": ["ResizeObserver", "ResizeObserverEntry"],
      "methods": [],
      "properties": [],
      "events": []
    },
    "Screen Capture API": {
      "overview": ["Screen Capture API"],
      "guides": ["/docs/Web/API/Screen_Capture_API/Using_Screen_Capture"],
      "interfaces": ["CaptureController"],
      "methods": ["MediaDevices.getDisplayMedia()"],
      "properties": [
        "MediaTrackConstraints.displaySurface",
        "MediaTrackConstraints.logicalSurface",
        "MediaTrackConstraints.suppressLocalAudioPlayback",
        "MediaTrackSettings.cursor",
        "MediaTrackSettings.displaySurface",
        "MediaTrackSettings.logicalSurface",
        "MediaTrackSettings.suppressLocalAudioPlayback",
        "MediaTrackSupportedConstraints.displaySurface",
        "MediaTrackSupportedConstraints.logicalSurface",
        "MediaTrackSupportedConstraints.suppressLocalAudioPlayback"
      ],
      "events": []
    },
    "Screen Orientation API": {
      "overview": ["Screen Orientation API"],
      "guides": ["/docs/Web/API/CSS_Object_Model/Managing_screen_orientation"],
      "interfaces": ["ScreenOrientation"],
      "methods": [],
      "properties": ["Screen.orientation"],
      "events": []
    },
    "Screen Wake Lock API": {
      "overview": ["Screen Wake Lock API"],
      "interfaces": ["WakeLock", "WakeLockSentinel"],
      "methods": [],
      "properties": ["Navigator.wakeLock"],
      "events": []
    },
    "Selection API": {
      "overview": ["Selection API"],
      "interfaces": ["Selection"],
      "properties": [],
      "methods": ["Document.getSelection()", "Window.getSelection()"],
      "events": ["Document: selectionchange", "Document: selectstart"]
    },
    "Sensor API": {
      "overview": ["Sensor APIs"],
      "interfaces": [
        "AbsoluteOrientationSensor",
        "Accelerometer",
        "AmbientLightSensor",
        "GravitySensor",
        "Gyroscope",
        "LinearAccelerationSensor",
        "Magnetometer",
        "OrientationSensor",
        "RelativeOrientationSensor",
        "Sensor",
        "SensorErrorEvent"
      ],
      "properties": [],
      "methods": [],
      "events": []
    },
    "Server Sent Events": {
      "overview": ["Server-sent events"],
      "guides": ["/docs/Web/API/Server-sent_events/Using_server-sent_events"],
      "interfaces": ["EventSource"],
      "methods": [],
      "properties": [],
      "events": []
    },
    "Service Workers API": {
      "overview": ["Service Worker API"],
      "guides": ["/docs/Web/API/Service_Worker_API/Using_Service_Workers"],
      "interfaces": [
        "Cache",
        "CacheStorage",
        "Client",
        "Clients",
        "ExtendableEvent",
        "ExtendableMessageEvent",
        "FetchEvent",
        "InstallEvent",
        "NavigationPreloadManager",
        "ServiceWorker",
        "ServiceWorkerContainer",
        "ServiceWorkerGlobalScope",
        "ServiceWorkerRegistration",
        "WindowClient"
      ],
      "methods": [],
      "properties": [
        "caches",
        "Navigator.serviceWorker",
        "WorkerNavigator.serviceWorker"
      ],
      "events": []
    },
    "Shared Storage API": {
      "overview": ["Shared Storage API"],
      "interfaces": [
        "SharedStorage",
        "SharedStorageOperation",
        "SharedStorageRunOperation",
        "SharedStorageSelectURLOperation",
        "SharedStorageWorklet",
        "SharedStorageWorkletGlobalScope",
        "WindowSharedStorage",
        "WorkletSharedStorage"
      ],
      "methods": [],
      "properties": ["Window.sharedStorage"],
      "events": []
    },
    "Speculation Rules API": {
      "overview": ["Speculation Rules API"],
      "interfaces": [],
      "properties": [
        "Document.prerendering",
        "PerformanceNavigationTiming.activationStart",
        "PerformanceResourceTiming.deliveryType"
      ],
      "methods": [],
      "events": ["Document: prerenderingchange"]
    },
    "Storage": {
      "overview": ["Storage API"],
      "guides": [
        "/docs/Web/API/Storage_API/Storage_quotas_and_eviction_criteria"
      ],
      "interfaces": ["StorageManager"],
      "methods": [],
      "properties": ["Navigator.storage", "WorkerNavigator.storage"],
      "events": []
    },
    "Storage Access API": {
      "overview": ["Storage Access API"],
      "guides": [
        "/docs/Web/API/Storage_Access_API/Using",
        "/docs/Web/API/Storage_Access_API/Related_website_sets"
      ],
      "interfaces": [],
      "methods": [
        "Document.hasStorageAccess()",
        "Document.requestStorageAccess()",
        "Document.requestStorageAccessFor()"
      ],
      "properties": [],
      "events": []
    },
    "Streams": {
      "overview": ["Streams API"],
      "guides": [
        "/docs/Web/API/Streams_API/Concepts",
        "/docs/Web/API/Streams_API/Using_readable_streams",
        "/docs/Web/API/Streams_API/Using_readable_byte_streams",
        "/docs/Web/API/Streams_API/Using_writable_streams"
      ],
      "interfaces": [
        "ByteLengthQueuingStrategy",
        "CountQueuingStrategy",
        "ReadableByteStreamController",
        "ReadableStream",
        "ReadableStreamBYOBReader",
        "ReadableStreamBYOBRequest",
        "ReadableStreamDefaultController",
        "ReadableStreamDefaultReader",
        "TransformStream",
        "TransformStreamDefaultController",
        "WritableStream",
        "WritableStreamDefaultController",
        "WritableStreamDefaultWriter"
      ],
      "methods": ["fetch()"],
      "properties": ["Response.body"],
      "events": []
    },
    "SVG": {
      "overview": ["SVG API"],
      "guides": ["/docs/Web/SVG"],
      "interfaces": [
        "SVGAElement",
        "SVGAngle",
        "SVGAnimateColorElement",
        "SVGAnimatedAngle",
        "SVGAnimatedBoolean",
        "SVGAnimatedEnumeration",
        "SVGAnimatedInteger",
        "SVGAnimatedLength",
        "SVGAnimatedLengthList",
        "SVGAnimatedNumber",
        "SVGAnimatedNumberList",
        "SVGAnimatedPreserveAspectRatio",
        "SVGAnimatedRect",
        "SVGAnimatedString",
        "SVGAnimatedTransformList",
        "SVGAnimateElement",
        "SVGAnimateMotionElement",
        "SVGAnimateTransformElement",
        "SVGAnimationElement",
        "SVGCircleElement",
        "SVGClipPathElement",
        "SVGComponentTransferFunctionElement",
        "SVGCursorElement",
        "SVGDefsElement",
        "SVGDescElement",
        "SVGElement",
        "SVGEllipseElement",
        "SVGFEBlendElement",
        "SVGFEColorMatrixElement",
        "SVGFEComponentTransferElement",
        "SVGFECompositeElement",
        "SVGFEConvolveMatrixElement",
        "SVGFEDiffuseLightingElement",
        "SVGFEDisplacementMapElement",
        "SVGFEDistantLightElement",
        "SVGFEDropShadowElement",
        "SVGFEFloodElement",
        "SVGFEFuncAElement",
        "SVGFEFuncBElement",
        "SVGFEFuncGElement",
        "SVGFEFuncRElement",
        "SVGFEGaussianBlurElement",
        "SVGFEImageElement",
        "SVGFEMergeElement",
        "SVGFEMergeNodeElement",
        "SVGFEMorphologyElement",
        "SVGFEOffsetElement",
        "SVGFEPointLightElement",
        "SVGFESpecularLightingElement",
        "SVGFESpotLightElement",
        "SVGFETileElement",
        "SVGFETurbulenceElement",
        "SVGFilterElement",
        "SVGFontElement",
        "SVGFontFaceElement",
        "SVGFontFaceFormatElement",
        "SVGFontFaceNameElement",
        "SVGFontFaceSrcElement",
        "SVGFontFaceUriElement",
        "SVGForeignObjectElement",
        "SVGGElement",
        "SVGGlyphElement",
        "SVGGradientElement",
        "SVGGraphicsElement",
        "SVGMarkerElement",
        "SVGHKernElement",
        "SVGImageElement",
        "SVGLength",
        "SVGLengthList",
        "SVGLinearGradientElement",
        "SVGLineElement",
        "SVGMaskElement",
        "SVGMetadataElement",
        "SVGMissingGlyphElement",
        "SVGMPathElement",
        "SVGNumber",
        "SVGNumberList",
        "SVGPathElement",
        "SVGPatternElement",
        "SVGPoint",
        "SVGPointList",
        "SVGPolygonElement",
        "SVGPolylineElement",
        "SVGPreserveAspectRatio",
        "SVGRadialGradientElement",
        "SVGRect",
        "SVGRectElement",
        "SVGScriptElement",
        "SVGSetElement",
        "SVGStopElement",
        "SVGStringList",
        "SVGStyleElement",
        "SVGSVGElement",
        "SVGSwitchElement",
        "SVGSymbolElement",
        "SVGTextContentElement",
        "SVGTextElement",
        "SVGTextPathElement",
        "SVGTextPositioningElement",
        "SVGTitleElement",
        "SVGTransform",
        "SVGTransformList",
        "SVGTRefElement",
        "SVGTSpanElement",
        "SVGUnitTypes",
        "SVGUseElement",
        "SVGViewElement",
        "SVGVKernElement",
        "TimeEvent"
      ],
      "methods": [],
      "properties": [],
      "events": [
        "Element: focusin",
        "Element: focusout",
        "Element: activate",
        "Element: click",
        "Element: mousedown",
        "Element: mouseup",
        "Element: mouseover",
        "Element: mousemove",
        "Element: mouseout"
      ]
    },
    "Touch Events": {
      "overview": ["Touch events"],
      "guides": [
        "/docs/Web/API/Touch_events/Using_Touch_Events",
        "/docs/Web/API/Touch_events/Multi-touch_interaction"
      ],
      "interfaces": ["Touch", "TouchEvent", "TouchList"],
      "methods": [],
      "properties": [],
      "events": [
        "Element: touchstart",
        "Element: touchend",
        "Element: touchmove",
        "Element: touchcancel"
      ]
    },
    "Trusted Types API": {
      "overview": ["Trusted Types API"],
      "interfaces": [
        "TrustedHTML",
        "TrustedScript",
        "TrustedScriptURL",
        "TrustedTypePolicy",
        "TrustedTypePolicyFactory"
      ],
      "methods": [],
      "properties": [],
      "events": []
    },
    "UI Events": {
      "overview": ["UI Events"],
      "guides": [
        "/docs/Web/API/UI_Events/Keyboard_event_code_values",
        "/docs/Web/API/UI_Events/Keyboard_event_key_values"
      ],
      "interfaces": [
        "CompositionEvent",
        "FocusEvent",
        "InputEvent",
        "KeyboardEvent",
        "MouseEvent",
        "MouseScrollEvent",
        "MutationEvent",
        "UIEvent",
        "WheelEvent"
      ],
      "methods": [],
      "properties": [],
      "events": [
        "Element: auxclick",
        "Element: beforeinput",
        "Element: blur",
        "Element: click",
        "Element: compositionstart",
        "Element: compositionupdate",
        "Element: compositionend",
        "Element: contextmenu",
        "Element: dblclick",
        "Element: focus",
        "Element: focusin",
        "Element: focusout",
        "Element: input",
        "Element: keydown",
        "Element: keypress",
        "Element: keyup",
        "Element: mousedown",
        "Element: mouseenter",
        "Element: mouseleave",
        "Element: mousemove",
        "Element: mouseout",
        "Element: mouseover",
        "Element: mouseup",
        "Element: select",
        "Element: wheel",
        "Window: abort",
        "Window: error",
        "Window: load",
        "Window: unload"
      ]
    },
    "URL API": {
      "overview": ["URL API"],
      "interfaces": ["URL", "URLSearchParams"],
      "methods": [],
      "properties": [],
      "events": []
    },
    "URL Pattern API": {
      "overview": ["URL Pattern API"],
      "interfaces": ["URLPattern"],
      "methods": [],
      "properties": [],
      "events": []
    },
    "User-Agent Client Hints API": {
      "overview": ["User-Agent Client Hints API"],
      "interfaces": ["NavigatorUAData"],
      "methods": [],
      "properties": [
        "Navigator.userAgentData",
        "WorkerNavigator.userAgentData"
      ],
      "events": []
    },
    "Vibration API": {
      "overview": ["Vibration API"],
      "interfaces": [],
      "methods": ["Navigator.vibrate()"],
      "properties": [],
      "events": []
    },
    "View Transitions API": {
      "overview": ["View Transitions API"],
      "interfaces": ["ViewTransition"],
      "methods": ["Document.startViewTransition()"],
      "properties": [],
      "events": []
    },
    "VirtualKeyboard API": {
      "overview": ["VirtualKeyboard API"],
      "interfaces": ["VirtualKeyboard"],
      "methods": [],
      "properties": [
        "HTMLElement.virtualkeyboardpolicy",
        "Navigator.virtualKeyboard"
      ],
      "events": []
    },
    "Visual Viewport": {
      "overview": ["Visual Viewport API"],
      "interfaces": ["VisualViewport"],
      "methods": [],
      "properties": ["Window.visualViewport"],
      "events": []
    },
    "Web Animations": {
      "overview": ["Web Animations API"],
      "guides": [
        "/docs/Web/API/Web_Animations_API/Using_the_Web_Animations_API",
        "/docs/Web/API/Web_Animations_API/Web_Animations_API_Concepts",
        "/docs/Web/API/Web_Animations_API/Keyframe_Formats"
      ],
      "interfaces": [
        "Animation",
        "AnimationEffect",
        "AnimationEvent",
        "AnimationTimeline",
        "AnimationPlaybackEvent",
        "DocumentTimeline",
        "KeyframeEffect",
        "ScrollTimeline",
        "ViewTimeline"
      ],
      "methods": [
        "Document.getAnimations()",
        "Element.animate()",
        "Element.getAnimations()"
      ],
      "properties": ["Document.timeline"],
      "events": []
    },
    "Web Audio API": {
      "overview": ["Web Audio API"],
      "guides": [
        "/docs/Web/API/Web_Audio_API/Using_Web_Audio_API",
        "/docs/Web/API/Web_Audio_API/Basic_concepts_behind_Web_Audio_API",
        "/docs/Web/API/Web_Audio_API/Best_practices",
        "/docs/Web/API/Web_Audio_API/Advanced_techniques",
        "/docs/Web/API/Web_Audio_API/Using_AudioWorklet",
        "/docs/Web/API/Web_Audio_API/Controlling_multiple_parameters_with_ConstantSourceNode",
        "/docs/Web/API/Web_Audio_API/Simple_synth",
        "/docs/Web/API/Web_Audio_API/Tools",
        "/docs/Web/API/Web_Audio_API/Using_IIR_filters",
        "/docs/Web/API/Web_Audio_API/Visualizations_with_Web_Audio_API",
        "/docs/Web/API/Web_Audio_API/Web_audio_spatialization_basics"
      ],
      "interfaces": [
        "AnalyserNode",
        "AudioBuffer",
        "AudioBufferSourceNode",
        "AudioContext",
        "AudioDestinationNode",
        "AudioListener",
        "AudioNode",
        "AudioParam",
        "AudioProcessingEvent",
        "AudioScheduledSourceNode",
        "AudioSinkInfo",
        "AudioWorklet",
        "AudioWorkletGlobalScope",
        "AudioWorkletNode",
        "AudioWorkletProcessor",
        "BaseAudioContext",
        "BiquadFilterNode",
        "ChannelMergerNode",
        "ChannelSplitterNode",
        "ConstantSourceNode",
        "ConvolverNode",
        "DelayNode",
        "DynamicsCompressorNode",
        "GainNode",
        "IIRFilterNode",
        "MediaElementAudioSourceNode",
        "MediaStreamAudioDestinationNode",
        "MediaStreamAudioSourceNode",
        "OfflineAudioCompletionEvent",
        "OfflineAudioContext",
        "OscillatorNode",
        "PannerNode",
        "PeriodicWave",
        "WaveShaperNode",
        "StereoPannerNode"
      ],
      "methods": [],
      "properties": [],
      "events": []
    },
    "Web Authentication API": {
      "overview": ["Web Authentication API"],
      "guides": [
        "/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion",
        "/docs/Web/API/Web_Authentication_API/Authenticator_data",
        "/docs/Web/API/Web_Authentication_API/WebAuthn_extensions"
      ],
      "interfaces": [
        "PublicKeyCredential",
        "AuthenticatorResponse",
        "AuthenticatorAttestationResponse",
        "AuthenticatorAssertionResponse"
      ],
      "methods": [
        "CredentialsContainer.create()",
        "CredentialsContainer.get()"
      ],
      "properties": [],
      "events": []
    },
    "Web Components": {
      "overview": ["Web components"],
      "guides": [
        "/docs/Web/Web_Components/Using_custom_elements",
        "/docs/Web/Web_Components/Using_shadow_DOM",
        "/docs/Web/Web_Components/Using_templates_and_slots"
      ],
      "interfaces": [
        "CustomElementRegistry",
        "CustomStateSet",
        "ElementInternals",
        "HTMLSlotElement",
        "HTMLTemplateElement",
        "ShadowRoot"
      ],
      "methods": [
        "Document.createElement()",
        "Element.attachShadow()",
        "HTMLElement.attachInternals()",
        "Node.getRootNode()"
      ],
      "properties": [
        "Element.shadowRoot",
        "Element.slot",
        "Event.composed",
        "Event.composedPath",
        "Node.isConnected",
        "Window.customElements"
      ],
      "events": []
    },
    "WebCodecs API": {
      "overview": ["WebCodecs API"],
      "interfaces": [
        "AudioData",
        "AudioDecoder",
        "AudioEncoder",
        "EncodedAudioChunk",
        "EncodedVideoChunk",
        "ImageDecoder",
        "ImageTrack",
        "ImageTrackList",
        "VideoDecoder",
        "VideoEncoder",
        "VideoColorSpace",
        "VideoFrame"
      ],
      "methods": [],
      "properties": [],
      "events": []
    },
    "Web Crypto API": {
      "overview": ["Web Crypto API"],
      "guides": [
        "/docs/Web/API/Web_Crypto_API/Non-cryptographic_uses_of_subtle_crypto"
      ],
      "interfaces": [
        "Crypto",
        "CryptoKey",
        "SubtleCrypto",
        "AesCbcParams",
        "AesCtrParams",
        "AesGcmParams",
        "AesKeyGenParams",
        "CryptoKeyPair",
        "EcKeyGenParams",
        "EcKeyImportParams",
        "EcdhKeyDeriveParams",
        "EcdsaParams",
        "HkdfParams",
        "HmacImportParams",
        "HmacKeyGenParams",
        "Pbkdf2Params",
        "RsaHashedImportParams",
        "RsaHashedKeyGenParams",
        "RsaOaepParams",
        "RsaPssParams"
      ],
      "methods": [],
      "properties": ["crypto_property"],
      "events": []
    },
    "WebGL": {
      "overview": ["WebGL API"],
      "guides": [
        "/docs/Web/API/WebGL_API/Constants",
        "/docs/Web/API/WebGL_API/Types",
        "/docs/Web/API/WebGL_API/WebGL_model_view_projection",
        "/docs/Web/API/WebGL_API/WebGL_best_practices",
        "/docs/Web/API/WebGL_API/By_example",
        "/docs/Web/API/WebGL_API/Basic_2D_animation_example",
        "/docs/Web/API/WebGL_API/Compressed_texture_formats",
        "/docs/Web/API/WebGL_API/Data",
        "/docs/Web/API/WebGL_API/Matrix_math_for_the_web",
        "/docs/Web/API/WebGL_API/Using_Extensions"
      ],
      "tutorial": [
        "/docs/Web/API/WebGL_API/Tutorial",
        "/docs/Web/API/WebGL_API/Tutorial/Getting_started_with_WebGL",
        "/docs/Web/API/WebGL_API/Tutorial/Adding_2D_content_to_a_WebGL_context",
        "/docs/Web/API/WebGL_API/Tutorial/Using_shaders_to_apply_color_in_WebGL",
        "/docs/Web/API/WebGL_API/Tutorial/Animating_objects_with_WebGL",
        "/docs/Web/API/WebGL_API/Tutorial/Creating_3D_objects_using_WebGL",
        "/docs/Web/API/WebGL_API/Tutorial/Using_textures_in_WebGL",
        "/docs/Web/API/WebGL_API/Tutorial/Lighting_in_WebGL",
        "/docs/Web/API/WebGL_API/Tutorial/Animating_textures_in_WebGL"
      ],
      "interfaces": [
        "WebGLRenderingContext",
        "WebGLBuffer",
        "WebGLFramebuffer",
        "WebGLRenderbuffer",
        "WebGLObject",
        "WebGLProgram",
        "WebGLShader",
        "WebGLTexture",
        "WebGLUniformLocation",
        "WebGLActiveInfo",
        "WebGLShaderPrecisionFormat",
        "WebGLContextEvent",
        "WebGLQuery",
        "WebGLSampler",
        "WebGLSync",
        "WebGLTransformFeedback",
        "WebGLVertexArrayObject",
        "WebGL2RenderingContext",
        "WEBGL_compressed_texture_s3tc",
        "WEBGL_compressed_texture_s3tc_srgb",
        "WEBGL_compressed_texture_etc1",
        "WEBGL_compressed_texture_pvrtc",
        "WEBGL_debug_renderer_info",
        "WEBGL_debug_shaders",
        "WEBGL_depth_texture",
        "OES_element_index_uint",
        "EXT_frag_depth",
        "WEBGL_lose_context",
        "EXT_texture_filter_anisotropic",
        "EXT_sRGB",
        "OES_standard_derivatives",
        "OES_texture_float",
        "WEBGL_draw_buffers",
        "OES_texture_float_linear",
        "EXT_shader_texture_lod",
        "OES_texture_half_float",
        "OES_texture_half_float_linear",
        "WEBGL_color_buffer_float",
        "EXT_color_buffer_half_float",
        "OES_vertex_array_object",
        "ANGLE_instanced_arrays",
        "EXT_blend_minmax",
        "EXT_disjoint_timer_query",
        "OES_draw_buffers_indexed"
      ],
      "methods": [],
      "properties": [],
      "events": [
        "HTMLCanvasElement: webglcontextlost",
        "HTMLCanvasElement: webglcontextrestored",
        "HTMLCanvasElement: webglcontextcreationerror"
      ]
    },
    "WebGPU API": {
      "overview": ["WebGPU API"],
      "interfaces": [
        "GPU",
        "GPUAdapter",
        "GPUAdapterInfo",
        "GPUBindGroup",
        "GPUBindGroupLayout",
        "GPUBuffer",
        "GPUCanvasContext",
        "GPUCommandBuffer",
        "GPUCommandEncoder",
        "GPUCompilationInfo",
        "GPUCompilationMessage",
        "GPUComputePassEncoder",
        "GPUComputePipeline",
        "GPUDevice",
        "GPUDeviceLostInfo",
        "GPUError",
        "GPUExternalTexture",
        "GPUInternalError",
        "GPUOutOfMemoryError",
        "GPUPipelineError",
        "GPUPipelineLayout",
        "GPUQuerySet",
        "GPUQueue",
        "GPURenderBundle",
        "GPURenderBundleEncoder",
        "GPURenderPassEncoder",
        "GPURenderPipeline",
        "GPUSampler",
        "GPUShaderModule",
        "GPUSupportedFeatures",
        "GPUSupportedLimits",
        "GPUTexture",
        "GPUTextureView",
        "GPUUncapturedErrorEvent",
        "GPUValidationError"
      ],
      "methods": ["HTMLCanvasElement.getContext()"],
      "properties": ["Navigator.gpu", "WorkerNavigator.gpu"],
      "events": ["GPUDevice: uncapturederror"]
    },
    "WebHID API": {
      "overview": ["WebHID API"],
      "interfaces": [
        "HID",
        "HIDDevice",
        "HIDInputReportEvent",
        "HIDConnectionEvent"
      ],
      "methods": [],
      "properties": ["Navigator.hid"],
      "events": []
    },
    "Web Locks API": {
      "overview": ["Web Locks API"],
      "interfaces": ["Lock", "LockManager"],
      "methods": [],
      "properties": ["Navigator.locks", "WorkerNavigator.locks"],
      "events": []
    },
    "Web MIDI API": {
      "overview": ["Web MIDI API"],
      "interfaces": [
        "MIDIInputMap",
        "MIDIOutputMap",
        "MIDIAccess",
        "MIDIPort",
        "MIDIInput",
        "MIDIOutput",
        "MIDIMessageEvent",
        "MIDIConnectionEvent"
      ],
      "methods": ["Navigator.requestMIDIAccess()"],
      "properties": [],
      "events": []
    },
    "Web NFC API": {
      "overview": ["Web NFC API"],
      "interfaces": ["NDEFMessage", "NDEFReader", "NDEFRecord"],
      "methods": [],
      "properties": [],
      "events": []
    },
    "Web Notifications": {
      "overview": ["Notifications API"],
      "guides": ["/docs/Web/API/Notifications_API/Using_the_Notifications_API"],
      "interfaces": ["Notification", "NotificationEvent"],
      "methods": [
        "ServiceWorkerRegistration.showNotification()",
        "ServiceWorkerRegistration.getNotifications()"
      ],
      "properties": [],
      "events": [
        "ServiceWorkerGlobalScope: notificationclick",
        "ServiceWorkerGlobalScope: notificationclose"
      ]
    },
    "WebRTC": {
      "overview": ["WebRTC API"],
      "guides": [
        "/docs/Web/API/WebRTC_API/Protocols",
        "/docs/Web/API/WebRTC_API/Connectivity",
        "/docs/Web/API/WebRTC_API/Perfect_negotiation",
        "/docs/Web/API/WebRTC_API/Session_lifetime",
        "/docs/Web/API/WebRTC_API/Signaling_and_video_calling",
        "/docs/Web/API/WebRTC_API/Using_data_channels",
        "/docs/Web/API/WebRTC_API/Using_DTMF",
        "/docs/Web/API/WebRTC_API/Using_Encoded_Transforms",
        "/docs/Web/API/WebRTC_API/adapter.js",
        "/docs/Web/API/WebRTC_API/Simple_RTCDataChannel_sample",
        "/docs/Web/API/WebRTC_API/Build_a_phone_with_peerjs"
      ],
      "interfaces": [
        "RTCPeerConnection",
        "RTCSessionDescription",
        "RTCIceCandidate",
        "RTCPeerConnectionIceEvent",
        "RTCPeerConnectionIceErrorEvent",
        "RTCCertificate",
        "RTCRtpSender",
        "RTCRtpReceiver",
        "RTCRtpTransceiver",
        "RTCDtlsTransport",
        "RTCIceTransport",
        "RTCTrackEvent",
        "RTCSctpTransport",
        "RTCDataChannel",
        "RTCDataChannelEvent",
        "RTCDTMFSender",
        "RTCDTMFToneChangeEvent",
        "RTCStatsReport",
        "RTCErrorEvent",
        "RTCRtpScriptTransform",
        "RTCRtpScriptTransformer",
        "RTCEncodedVideoFrame",
        "RTCEncodedAudioFrame",
        "RTCTransformEvent",
        "RTCRtpCodecParameters",
        "RTCIceParameters",
        "RTCIceCandidatePair",
        "RTCIceCandidatePairStats",
        "RTCInboundRtpStreamStats",
        "RTCIceCandidateStats",
        "RTCAudioSourceStats",
        "RTCOutboundRtpStreamStats",
        "RTCPeerConnectionStats",
        "RTCRemoteOutboundRtpStreamStats"
      ],
      "methods": ["MediaDevices.getUserMedia()"],
      "properties": [
        "Navigator.mediaDevices",
        "RTCRtpReceiver.transform",
        "RTCRtpSender.transform"
      ],
      "events": [
        "RTCDataChannel: bufferedamountlow",
        "RTCDataChannel: close",
        "RTCDataChannel: closing",
        "RTCPeerConnection: connectionstatechange",
        "RTCPeerConnection: datachannel",
        "RTCDataChannel: error",
        "RTCIceTransport: error",
        "RTCDtlsTransport: error",
        "RTCSctpTransport: error",
        "RTCIceTransport: gatheringstatechange",
        "RTCPeerConnection: icecandidate",
        "RTCPeerConnection: icecandidateerror",
        "RTCPeerConnection: iceconnectionstatechange",
        "RTCPeerConnection: icegatheringstatechange",
        "RTCDataChannel: message",
        "RTCPeerConnection: negotiationneeded",
        "RTCDataChannel: open",
        "RTCIceTransport: selectedcandidatepairchange",
        "RTCPeerConnection: signalingstatechange",
        "RTCIceTransport: statechange",
        "RTCDtlsTransport: statechange",
        "RTCDTMFSender: tonechange",
        "RTCPeerConnection: track",
        "DedicatedWorkerGlobalScope: rtctransform"
      ]
    },
    "Web Serial API": {
      "overview": ["Web Serial API"],
      "guides": [],
      "interfaces": ["Serial", "SerialPort"],
      "methods": [],
      "properties": ["Navigator.serial", "WorkerNavigator.serial"],
      "events": []
    },
    "Web Share API": {
      "overview": ["Web Share API"],
      "guides": [],
      "interfaces": [],
      "methods": ["Navigator.canShare()", "Navigator.share()"],
      "properties": [],
      "events": []
    },
    "WebSockets API": {
      "overview": ["WebSockets API"],
      "guides": [
        "/docs/Web/API/WebSockets_API/Writing_WebSocket_client_applications",
        "/docs/Web/API/WebSockets_API/Writing_WebSocket_servers",
        "/docs/Web/API/WebSockets_API/Writing_WebSocket_server",
        "/docs/Web/API/WebSockets_API/Writing_a_WebSocket_server_in_Java",
        "/docs/Web/API/WebSockets_API/Writing_a_WebSocket_server_in_JavaScript_Deno"
      ],
      "interfaces": ["WebSocket", "CloseEvent", "MessageEvent"],
      "methods": [],
      "properties": [],
      "events": []
    },
    "Web Speech API": {
      "overview": ["Web Speech API"],
      "guides": ["/docs/Web/API/Web_Speech_API/Using_the_Web_Speech_API"],
      "interfaces": [
        "SpeechGrammar",
        "SpeechGrammarList",
        "SpeechRecognition",
        "SpeechRecognitionAlternative",
        "SpeechRecognitionErrorEvent",
        "SpeechRecognitionEvent",
        "SpeechRecognitionResult",
        "SpeechRecognitionResultList",
        "SpeechSynthesis",
        "SpeechSynthesisErrorEvent",
        "SpeechSynthesisEvent",
        "SpeechSynthesisUtterance",
        "SpeechSynthesisVoice"
      ],
      "methods": [],
      "properties": [],
      "events": []
    },
    "Web Storage API": {
      "overview": ["Web Storage API"],
      "guides": ["/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API"],
      "interfaces": ["Storage", "StorageEvent"],
      "methods": [],
      "properties": ["Window.sessionStorage", "Window.localStorage"],
      "events": ["Window: storage"]
    },
    "WebTransport API": {
      "overview": ["WebTransport API"],
      "guides": [],
      "interfaces": [
        "WebTransport",
        "WebTransportBidirectionalStream",
        "WebTransportDatagramDuplexStream",
        "WebTransportReceiveStream",
        "WebTransportSendStream",
        "WebTransportError"
      ],
      "methods": [],
      "properties": [],
      "events": []
    },
    "Web Workers API": {
      "overview": ["Web Workers API"],
      "guides": [
        "/docs/Web/API/Web_Workers_API/Using_web_workers",
        "/docs/Web/API/Web_Workers_API/Functions_and_classes_available_to_workers",
        "/docs/Web/API/Web_Workers_API/Structured_clone_algorithm",
        "/docs/Web/API/Web_Workers_API/Transferable_objects"
      ],
      "interfaces": [
        "DedicatedWorkerGlobalScope",
        "SharedWorker",
        "SharedWorkerGlobalScope",
        "Worker",
        "WorkerGlobalScope",
        "WorkerLocation",
        "WorkerNavigator"
      ],
      "methods": [],
      "properties": [],
      "events": []
    },
    "WebOTP API": {
      "overview": ["WebOTP API"],
      "interfaces": ["OTPCredential"],
      "methods": ["CredentialsContainer.get()"],
      "properties": [],
      "events": []
    },
    "WebUSB API": {
      "overview": ["WebUSB API"],
      "interfaces": [
        "USB",
        "USBAlternateInterface",
        "USBConfiguration",
        "USBConnectionEvent",
        "USBDevice",
        "USBEndPoint",
        "USBInterface",
        "USBInTransferResult",
        "USBIsochronousInTransferPacket",
        "USBIsochronousInTransferResult",
        "USBIsochronousOutTransferPacket",
        "USBIsochronousOutTransferResult",
        "USBOutTransferResult"
      ],
      "methods": [],
      "properties": ["Navigator.usb", "WorkerNavigator.usb"],
      "events": []
    },
    "WebVR API": {
      "overview": ["WebVR API"],
      "guides": [
        "/docs/Web/API/WebVR_API/Using_the_WebVR_API",
        "/docs/Web/API/WebVR_API/Concepts",
        "/docs/Web/API/WebVR_API/Using_VR_controllers_with_WebVR"
      ],
      "interfaces": [
        "VRDisplay",
        "VRDisplayCapabilities",
        "VRDisplayEvent",
        "VRFrameData",
        "VRPose",
        "VREyeParameters",
        "VRFieldOfView",
        "VRLayerInit",
        "VRStageParameters"
      ],
      "methods": ["Navigator.getVRDisplays()"],
      "properties": ["Gamepad.displayId", "Navigator.activeVRDisplays"],
      "events": [
        "Window: vrdisplayconnected",
        "Window: vrdisplaydisconnected",
        "Window: vrdisplayactivate",
        "Window: vrdisplaydeactivate",
        "Window: vrdisplayblur",
        "Window: vrdisplayfocus",
        "Window: vrdisplaypresentchange"
      ]
    },
    "WebVTT": {
      "overview": ["WebVTT API"],
      "guides": ["/docs/Web/API/Web_Video_Text_Tracks_Format"],
      "interfaces": [
        "VTTCue",
        "VTTRegion",
        "TextTrack",
        "TextTrackCue",
        "TextTrackCueList",
        "TextTrackList",
        "TrackEvent"
      ],
      "methods": [],
      "properties": [],
      "events": []
    },
    "WebXR Device API": {
      "overview": ["WebXR Device API"],
      "guides": [
        "/docs/Web/API/WebXR_Device_API/Fundamentals",
        "/docs/Web/API/WebXR_Device_API/Lifecycle",
        "/docs/Web/API/WebXR_Device_API/Startup_and_shutdown",
        "/docs/Web/API/WebXR_Device_API/Cameras",
        "/docs/Web/API/WebXR_Device_API/Geometry",
        "/docs/Web/API/WebXR_Device_API/Spatial_tracking"
      ],
      "interfaces": [
        "XRAnchor",
        "XRBoundedReferenceSpace",
        "XRCPUDepthInformation",
        "XRDepthInformation",
        "XRFrame",
        "XRInputSource",
        "XRInputSourceArray",
        "XRInputSourceEvent",
        "XRInputSourcesChangeEvent",
        "XRPose",
        "XRReferenceSpace",
        "XRReferenceSpaceEvent",
        "XRRenderState",
        "XRRigidTransform",
        "XRSession",
        "XRSessionEvent",
        "XRSpace",
        "XRSystem",
        "XRView",
        "XRViewerPose",
        "XRViewport",
        "XRWebGLBinding",
        "XRWebGLDepthInformation",
        "XRWebGLLayer"
      ],
      "methods": ["WebGLRenderingContext.makeXRCompatible()"],
      "properties": ["Navigator.xr"],
      "events": [
        "XRSystem: devicechange",
        "XRSession: end",
        "XRSession: inputsourceschange",
        "XRReferenceSpace: reset",
        "XRSession: select",
        "XRSession: selectend",
        "XRSession: selectstart",
        "XRSession: visibilitychange"
      ]
    },
    "Window Controls Overlay API": {
      "overview": ["Window Controls Overlay API"],
      "interfaces": [
        "WindowControlsOverlay",
        "WindowControlsOverlayGeometryChangeEvent"
      ],
      "methods": [],
      "properties": ["Navigator.windowControlsOverlay"],
      "events": []
    },
    "Window Management API": {
      "overview": ["Window Management API"],
      "guides": [
        "/docs/Web/API/Window_Management_API/Using",
        "/docs/Web/API/Window_Management_API/Multi-screen_origin"
      ],
      "interfaces": ["ScreenDetails", "ScreenDetailed"],
      "methods": ["Element.requestFullscreen()", "Window.getScreenDetails()"],
      "properties": ["Screen.isExtended"],
      "events": ["Screen: change"]
    },
    "XMLHttpRequest API": {
      "overview": ["XMLHttpRequest API"],
      "guides": [
        "/docs/Web/API/XMLHttpRequest_API/Using_XMLHttpRequest",
        "/docs/Web/API/XMLHttpRequest_API/HTML_in_XMLHttpRequest",
        "/docs/Web/API/XMLHttpRequest_API/Synchronous_and_Asynchronous_Requests",
        "/docs/Web/API/XMLHttpRequest_API/Sending_and_Receiving_Binary_Data",
        "/docs/Web/API/XMLHttpRequest_API/Using_FormData_Objects"
      ],
      "interfaces": [
        "FormData",
        "ProgressEvent",
        "XMLHttpRequest",
        "XMLHttpRequestEventTarget",
        "XMLHttpRequestUpload"
      ],
      "methods": [],
      "properties": [],
      "events": []
    },
    "XSLT": {
      "interfaces": ["XSLTProcessor"]
    }
  }
]
