# Note that this workflow uses `get-diff-action` which is important.
# It gives us an environment variable called `GIT_DIFF` which is a string
# that is a list of file paths.
# If you want to do what this workflow does on your laptop you can simulate
# it like this:
#
#    export GIT_DIFF=`git diff --name-only master... | grep 'content/files' | grep '\.html$'`
#    node content build --no-progressbar --files="${GIT_DIFF}"
#
# That way, you can behave on your laptop like, this action behaves here.

name: PR Build

on:
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: technote-space/get-diff-action@v3
        id: git_diff_content
        with:
          SEPARATOR: ","
          SUFFIX_FILTER: .html
          PREFIX_FILTER: files/

      - uses: actions/checkout@v2
        with:
          repository: mdn/yari
          path: yari

      - name: Setup Node.js environment
        if: steps.git_diff_content.outputs.diff
        uses: actions/setup-node@v2.1.1
        with:
          node-version: "12"

      - name: Get yarn cache directory path
        if: steps.git_diff_content.outputs.diff
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2.1.1
        if: steps.git_diff_content.outputs.diff
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          # TODO: Is this correct?! We wanna make sure it's the yarn.lock
          # from ./yari/ and not ./ which is just the content.
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install all yarn packages
        if: steps.git_diff_content.outputs.diff
        run: |
          cd yari
          yarn --frozen-lockfile

      - name: Build changed content
        if: steps.git_diff_content.outputs.diff
        run: |
          export CONTENT_ROOT=$(pwd)/files
          # Need to run from the yari we've cleanly cloned.
          cd yari

          # Some day, when our number of flaws have reached 0 we'll change
          # this to "*:error" which means the slightest flaw in the build
          # will break the build.
          # See https://github.com/mdn/yari/issues/715
          export BUILD_FLAW_LEVELS="*:ignore"

          # Note, it might be interesting to explore building *some*
          # pages in a PR build if the diff doesn't have any index.html
          # files changed.
          # Instead of building the git diff, you build some known typical
          # folders that you know don't take too long and do cover a lot
          # of interesting macros etc.
          # This way, when an edit to the source code comes in, perhaps the
          # functional tests have a gap in them but actually building
          # real content exposes it.

          # Setting this to an empty string effectively means that the
          # <iframe> src will end up being the relative URL of the current
          # document as a base.
          # I.e. like this, if the current document is '/en-US/docs/Foo':
          #  <iframe src="/en-US/docs/Foo/_samples_/index.html">
          # ...for example.
          # Yes, it's potentially "insecure" because the iframe will execute
          # whatever code is inserted into the code example. But since the
          # whole (possible) domain for PR builds will never be somewhere
          # where there are interesting cookies, it's a safe choice.
          export BUILD_LIVE_SAMPLES_BASE_URL=

          # In these builds we never care for or need the ability to sign in.
          # This environment variable will disable that functionality entirely.
          export REACT_APP_DISABLE_AUTH=true

          export BUILD_NO_PROGRESSBAR=true
          export BUILD_FILES="${{ env.GIT_DIFF }}"
          yarn prepare-build
          yarn build
