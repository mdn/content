# This file tests more or less everything related to a pull request. All
# in one big job. At the end, if all the testing passes, it proceeds
# to upload all the files that were built to our Dev environment.
# This way, if the tests passed, you'll be able to review the built
# pages on a public URL.

name: PR Test

on:
  pull_request_target:
    branches:
      - 2453-deploy-build-files-in-pr

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Setup Node.js environment
        uses: actions/setup-node@v2.1.4
        with:
          node-version: "12"

      - name: Cache node_modules
        uses: actions/cache@v2.1.4
        id: cached-node_modules
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

      - name: Install all yarn packages
        if: steps.cached-node_modules.outputs.cache-hit != 'true'
        run: |
          yarn --frozen-lockfile

      - uses: technote-space/get-diff-action@v4.0.5
        id: git_diff_content
        with:
          PATTERNS: files/**/*.html
          SET_ENV_NAME: GIT_DIFF_CONTENT

      - name: Build changed content
        if: ${{ env.GIT_DIFF_CONTENT }}
        env:
          CONTENT_ROOT: ${{ github.workspace }}/files

          # Some day, when our number of flaws have reached 0 we'll change
          # this to "*:error" which means the slightest flaw in the build
          # will break the build.
          # See https://github.com/mdn/yari/issues/715
          BUILD_FLAW_LEVELS: "*:ignore"

          # Setting this to an empty string effectively means that the
          # <iframe> src will end up being the relative URL of the current
          # document as a base.
          # I.e. like this, if the current document is '/en-US/docs/Foo':
          #  <iframe src="/en-US/docs/Foo/_samples_/index.html">
          # ...for example.
          # Yes, it's potentially "insecure" because the iframe will execute
          # whatever code is inserted into the code example. But since the
          # whole (possible) domain for PR builds will never be somewhere
          # where there are interesting cookies, it's a safe choice.
          BUILD_LIVE_SAMPLES_BASE_URL: ""

          # In these builds we never care for or need the ability to sign in.
          # This environment variable will disable that functionality entirely.
          REACT_APP_DISABLE_AUTH: true

          # TODO: This should be implicit when `CI=true`
          BUILD_NO_PROGRESSBAR: true

          BUILD_OUT_ROOT: ${{ github.workspace }}/node_modules/@mdn/yari/client/build

        run: |
          # Note, it might be interesting to explore building *some*
          # pages in a PR build if the diff doesn't have any index.html
          # files changed.
          # Instead of building the git diff, you build some known typical
          # folders that you know don't take too long and do cover a lot
          # of interesting macros etc.
          # This way, when an edit to the source code comes in, perhaps the
          # functional tests have a gap in them but actually building
          # real content exposes it.

          # The reason this script isn't in `package.json` is because
          # you don't need that script as a writer. It's only used in CI
          # and it can't use the default CONTENT_ROOT that gets set in
          # package.json.
          yarn build ${{ env.GIT_DIFF_CONTENT }}

          echo "Disk usage size of $BUILD_OUT_ROOT:"
          du -sh $BUILD_OUT_ROOT

      - uses: technote-space/get-diff-action@v4.0.5
        with:
          PATTERNS: files/**/*.+(png|jpeg|jpg|gif|svg|webp)
          ABSOLUTE: true
          SET_ENV_NAME: GIT_DIFF_FILES

      - name: Check changed files
        if: ${{ env.GIT_DIFF_FILES }}
        run: |
          echo ${{ env.GIT_DIFF_FILES }}

          export CONTENT_ROOT=$(pwd)/files
          yarn filecheck ${{ env.GIT_DIFF_FILES }}

      - uses: technote-space/get-diff-action@v4.0.5
        id: git_diff_redirects
        with:
          PATTERNS: files/**/_redirects.txt
          SET_ENV_NAME: GIT_DIFF_REDIRECTS

      - name: Validate redirects
        if: ${{ env.GIT_DIFF_REDIRECTS }}
        run: |
          echo ${{ env.GIT_DIFF_REDIRECTS }}
          yarn content validate-redirects


      # Proceed to deploy the built files (if there were any)

      - uses: actions/checkout@v2
        if: ${{ env.GIT_DIFF_CONTENT }}
        with:
          repository: mdn/yari
          path: yari

      - name: Install Python
        if: ${{ env.GIT_DIFF_CONTENT }}
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - name: Install Python poetry
        if: ${{ env.GIT_DIFF_CONTENT }}
        uses: snok/install-poetry@v1.1.1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        if: ${{ env.GIT_DIFF_CONTENT }}
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: yari/deployer/.venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install deployer
        if: ${{ env.GIT_DIFF_CONTENT }} && steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          cd yari/deployer
          poetry install

      - name: Deploy built content
        if: ${{ env.GIT_DIFF_CONTENT }}
        env:
          CONTENT_ROOT: ${{ github.workspace }}/files

          DEPLOYER_BUCKET_NAME: mdn-content-dev

          AWS_ACCESS_KEY_ID: ${{ secrets.DEPLOYER_STAGE_AND_DEV_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.DEPLOYER_STAGE_AND_DEV_AWS_SECRET_ACCESS_KEY }}

          BUILD_OUT_ROOT: ${{ github.workspace }}/node_modules/@mdn/yari/client/build

          PR_NUMBER: ${{ github.event.pull_request.number }}

        run: |
          cd yari/deployer
          # PR_NUMBER=$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')
          # echo $PR_NUMBER
          # echo ${{ github.event.issue.number }}
          echo ${{ github.event.pull_request.number }}
          # echo $BUILD_OUT_ROOT
          ls $BUILD_OUT_ROOT/en-us/docs/mdn
          poetry run deployer upload --prefix="pr$PR_NUMBER" $BUILD_OUT_ROOT

      - name: Comment on PR
        uses: actions/github-script@v3
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Please find a preview at https://.content.dev.mdn.mozit.cloud/ ($PR_NUMBER)'
            });
