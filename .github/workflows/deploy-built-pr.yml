# Things to do and run after a "PR Test" workflow has finished successfully.
# Note, as of right now, this workflow does a bunch of things. It might be
# worth considering to break it up so there's a dedicated post-PR
# workflow just to posting PR comments about flaws, for example.

name: Post-PR

on:
  workflow_run:
    workflows: ["PR Test"]
    types:
      - completed

jobs:
  tests:
    runs-on: ubuntu-latest

    if: >
      ${{ github.event.workflow_run.event == 'pull_request' &&
      github.event.workflow_run.conclusion == 'success' }}

    steps:
      - uses: actions/checkout@v2

      - name: Setup Node.js environment
        uses: actions/setup-node@v2.1.4
        with:
          node-version: "12"

      - name: Cache node_modules
        uses: actions/cache@v2.1.4
        id: cached-node_modules
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

      - name: Install all yarn packages
        if: steps.cached-node_modules.outputs.cache-hit != 'true'
        run: |
          yarn --frozen-lockfile


      - name: 'Download artifact'
        uses: actions/github-script@v3
        with:
          script: |
            var artifacts = await github.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: ${{github.event.workflow_run.id }},
            });
            var matchArtifact = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "build"
            })[0];
            var download = await github.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            var fs = require('fs');
            fs.writeFileSync('${{github.workspace}}/build.zip', Buffer.from(download.data));

      - name: Unzip what was downloaded
        run: |
          unzip build.zip -d build

      - uses: actions/checkout@v2
        with:
           repository: mdn/yari
           path: yari

      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - name: Install Python poetry
        uses: snok/install-poetry@v1.1.1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: yari/deployer/.venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install deployer
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          ls -l
          cd yari/deployer
          poetry install

      - name: Deploy built content
        env:
          CONTENT_ROOT: ${{ github.workspace }}/files

          DEPLOYER_BUCKET_NAME: mdn-content-dev

          AWS_ACCESS_KEY_ID: ${{ secrets.DEPLOYER_STAGE_AND_DEV_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.DEPLOYER_STAGE_AND_DEV_AWS_SECRET_ACCESS_KEY }}

          BUILD_OUT_ROOT: ${{ github.workspace }}/build

          DEPLOYER_LOG_EACH_SUCCESSFUL_UPLOAD: true

        run: |
          PR_NUMBER=`cat build/NR`
          echo "PRNUMBER"
          echo $PR_NUMBER
          cd yari/deployer

          poetry run deployer upload --prefix="pr$PR_NUMBER" --content-root=$CONTENT_ROOT $BUILD_OUT_ROOT


      # - name: Comment on PR
      #   uses: actions/github-script@v3
      #   env:
      #     PR_NUMBER: ${{ github.event.pull_request.number }}
      #   with:
      #     github-token: ${{secrets.GITHUB_TOKEN}}
      #     script: |
      #       github.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: 'Please find a preview at https://pr${PR_NUMBER}.content.dev.mdn.mozit.cloud/...'
      #       });
