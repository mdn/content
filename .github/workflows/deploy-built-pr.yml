# XXX

name: Deploy built PR

on:
  workflow_run:
    workflows: ["PR Test"]
    types:
      - completed

jobs:
  tests:
    runs-on: ubuntu-latest

    # if: contains(github.event.pull_request.labels.*.name, 'deploy-preview')
    if: >
      ${{ github.event.workflow_run.event == 'pull_request' &&
      github.event.workflow_run.conclusion == 'success' }}

    steps:
      - uses: actions/checkout@v2

      - name: 'Download artifact'
        uses: actions/github-script@v3
        with:
          script: |
            var artifacts = await github.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: ${{github.event.workflow_run.id }},
            });
            var matchArtifact = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "build"
            })[0];
            var download = await github.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            var fs = require('fs');
            fs.writeFileSync('${{github.workspace}}/build.zip', Buffer.from(download.data));

      # - name: Unzip what was downloaded
      #   run: |
      #     echo "Ls before unzip"
      #     ls -l
      #     unzip build.zip -d built_files
      #     echo "Ls after unzip"
      #     ls -l

      # - name: Deploy preview build
      #   run: |
      #     ls -l
      #     echo "PR number:"
      #     cat NR
      #     echo ""
      #     ls -l
      #     ls -l build


      # Proceed to deploy the built files (if there were any)

      # - uses: actions/checkout@v2
        # if: ${{ env.GIT_DIFF_CONTENT }}
        # with:
        #   repository: mdn/content
          # path: yari

      - name: Combine static with built files
        run: |
          ls -l node_modules/@mdn/yari/client/build
          unzip build.zip -d node_modules/@mdn/yari/client/build
          ls -l node_modules/@mdn/yari/client/build
          tree node_modules/@mdn/yari/client/build


      # - name: Setup Node.js environment
      #   uses: actions/setup-node@v2.1.5
      #   with:
      #     node-version: "12"

      # - name: Cache node_modules
      #   uses: actions/cache@v2.1.4
      #   id: cached-node_modules
      #   with:
      #     path: |
      #       node_modules
      #     key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}

      # - name: Install all yarn packages
      #   if: steps.cached-node_modules.outputs.cache-hit != 'true'
      #   env:
      #     PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: 1
      #   run: yarn --frozen-lockfile

      - name: Install Python
        # if: ${{ env.GIT_DIFF_CONTENT }}
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - name: Install Python poetry
        # if: ${{ env.GIT_DIFF_CONTENT }}
        uses: snok/install-poetry@v1.1.1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        # if: ${{ env.GIT_DIFF_CONTENT }}
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: yari/deployer/.venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install deployer
        # if: ${{ env.GIT_DIFF_CONTENT }} && steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          cd yari/deployer
          poetry install

      # - name: Deploy built content
      #   if: ${{ env.GIT_DIFF_CONTENT }}
      #   env:
      #     CONTENT_ROOT: ${{ github.workspace }}/files

      #     DEPLOYER_BUCKET_NAME: mdn-content-dev

      #     AWS_ACCESS_KEY_ID: ${{ secrets.DEPLOYER_STAGE_AND_DEV_AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.DEPLOYER_STAGE_AND_DEV_AWS_SECRET_ACCESS_KEY }}

      #     BUILD_OUT_ROOT: ${{ github.workspace }}/node_modules/@mdn/yari/client/build

      #     PR_NUMBER: ${{ github.event.pull_request.number }}
      #   working-directory: yari/deployer
      #   run: |
      #     # PR_NUMBER=$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')
      #     # echo $PR_NUMBER
      #     # echo ${{ github.event.issue.number }}
      #     # echo ${{ github.event.pull_request.number }}
      #     # echo $BUILD_OUT_ROOT
      #     # ls $BUILD_OUT_ROOT/en-us/docs/mdn
      #     poetry run deployer upload --prefix="pr$PR_NUMBER" $BUILD_OUT_ROOT

      # - name: Comment on PR
      #   uses: actions/github-script@v3
      #   env:
      #     PR_NUMBER: ${{ github.event.pull_request.number }}
      #   with:
      #     github-token: ${{secrets.GITHUB_TOKEN}}
      #     script: |
      #       github.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: 'Please find a preview at https://pr${PR_NUMBER}.content.dev.mdn.mozit.cloud/...'
      #       });
