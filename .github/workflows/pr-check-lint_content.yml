name: Lint and review content files

on:
  pull_request_target:
    branches:
      - main
    paths:
      - .nvmrc
      - "*.md"
      - "files/**/*.md"

permissions:
  pull-requests: write

concurrency:
  group: ci-${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  lint-and-review-docs:
    name: Lint and review Markdown docs
    runs-on: ubuntu-latest

    steps:
      - name: Checkout BASE commit
        uses: actions/checkout@v5

      - name: Get changed files
        id: check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BASE_SHA: ${{ github.event.pull_request.base.sha }}
          HEAD_SHA: ${{ github.event.pull_request.head.sha }}
        run: |
          echo "Fetching changed files between ${BASE_SHA}...${HEAD_SHA}"
          FILTERED_FILES=$(gh api repos/{owner}/{repo}/compare/${BASE_SHA}...${HEAD_SHA} \
            --jq '.files | .[] | select(.status|IN("added", "modified", "renamed", "copied", "changed")) | .filename' | \
            egrep -i "^files/.*\.md$" || true)

          EOF="$(openssl rand -hex 8)"
          echo "DIFF_DOCUMENTS<<${EOF}" >> "$GITHUB_OUTPUT"
          echo "${FILTERED_FILES}" >> "$GITHUB_OUTPUT"
          echo "${EOF}" >> "$GITHUB_OUTPUT"

          if [ -n "${FILTERED_FILES// /}" ]; then
            echo "HAS_FILES=true" >> "$GITHUB_OUTPUT"
          else
            echo "HAS_FILES=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Checkout HEAD commit
        if: steps.check.outputs.HAS_FILES == 'true'
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          path: pr_head

      - name: Prepare changed files
        if: steps.check.outputs.HAS_FILES == 'true'
        run: |
          git config --global user.email "108879845+mdn-bot@users.noreply.github.com"
          git config --global user.name "mdn-bot"

          rm -rf files *.md
          mv pr_head/files pr_head/*.md . || true
          rm -rf pr_head

          git add .
          git commit -m "Temporary commit from PR head"

      - name: Setup Node.js
        if: steps.check.outputs.HAS_FILES == 'true'
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: yarn

      - name: Install dependencies
        if: steps.check.outputs.HAS_FILES == 'true'
        run: yarn --frozen-lockfile
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run linters and formatters
        id: lint
        if: steps.check.outputs.HAS_FILES == 'true'
        env:
          DIFF_DOCUMENTS: ${{ steps.check.outputs.DIFF_DOCUMENTS }}
        run: |
          EOF="$(openssl rand -hex 8)"
          readarray -t files_to_lint <<< "$DIFF_DOCUMENTS"

          echo "Processing ${#files_to_lint[@]} Markdown files..."
          printf "'%s'\n" "${files_to_lint[@]}"

          # CRLF check
          CRLF_FAILED=true
          CRLF_LOG=$(git ls-files --eol "${files_to_lint[@]}" | grep -E 'w/(mixed|crlf)') || CRLF_FAILED=false
          echo "CRLF_LOG<<${EOF}" >> "$GITHUB_OUTPUT"
          echo "${CRLF_LOG}" >> "$GITHUB_OUTPUT"
          echo "${EOF}" >> "$GITHUB_OUTPUT"
          echo "CRLF_FAILED=${CRLF_FAILED}" >> "$GITHUB_OUTPUT"

          # Markdownlint
          MD_LINT_FAILED=false
          MD_LINT_LOG=$(yarn markdownlint-cli2 --fix "${files_to_lint[@]}" 2>&1) || MD_LINT_FAILED=true
          echo "MD_LINT_LOG<<${EOF}" >> "$GITHUB_OUTPUT"
          echo "${MD_LINT_LOG}" >> "$GITHUB_OUTPUT"
          echo "${EOF}" >> "$GITHUB_OUTPUT"
          echo "MD_LINT_FAILED=${MD_LINT_FAILED}" >> "$GITHUB_OUTPUT"

          # Front-matter linter
          FM_LINT_FAILED=false
          FM_LINT_LOG=$(node scripts/front-matter_linter.js --fix true "${files_to_lint[@]}" 2>&1) || FM_LINT_FAILED=true
          echo "FM_LINT_LOG<<${EOF}" >> "$GITHUB_OUTPUT"
          echo "${FM_LINT_LOG}" >> "$GITHUB_OUTPUT"
          echo "${EOF}" >> "$GITHUB_OUTPUT"
          echo "FM_LINT_FAILED=${FM_LINT_FAILED}" >> "$GITHUB_OUTPUT"

          # Prettier
          PRETTIER_FAILED=false
          PRETTIER_LOG=$(yarn prettier --check "${files_to_lint[@]}" 2>&1) || PRETTIER_FAILED=true
          echo "PRETTIER_LOG<<${EOF}" >> "$GITHUB_OUTPUT"
          echo "${PRETTIER_LOG}" >> "$GITHUB_OUTPUT"
          echo "${EOF}" >> "$GITHUB_OUTPUT"
          echo "PRETTIER_FAILED=${PRETTIER_FAILED}" >> "$GITHUB_OUTPUT"
          yarn prettier -w "${files_to_lint[@]}"

          if [[ -n $(git diff) ]]; then
            echo "FILES_MODIFIED=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Setup reviewdog
        if: steps.lint.outputs.FILES_MODIFIED == 'true' || steps.lint.outputs.MD_LINT_FAILED == 'true'
        uses: reviewdog/action-setup@v1
        with:
          reviewdog_version: latest

      - name: Suggest changes with reviewdog
        if: steps.lint.outputs.FILES_MODIFIED == 'true'
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TMPFILE=$(mktemp)
          git diff >"${TMPFILE}"
          git stash -u && git stash drop
          reviewdog \
            -name="mdn-linter" \
            -f=diff \
            -f.diff.strip=1 \
            -filter-mode=diff_context \
            -reporter=github-pr-review < "${TMPFILE}"

      - name: Report markdownlint issues
        if: steps.lint.outputs.MD_LINT_FAILED == 'true'
        env:
          MD_LINT_LOG: ${{ steps.lint.outputs.MD_LINT_LOG }}
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "${MD_LINT_LOG}" | reviewdog \
            -efm="%f:%l:%c %m" \
            -efm="%f:%l %m" \
            -name="markdownlint" \
            -diff="git diff" \
            -reporter="github-pr-review"

      - name: Fail if issues remain
        if: steps.lint.outputs.FILES_MODIFIED == 'true' || steps.lint.outputs.CRLF_FAILED == 'true' || steps.lint.outputs.MD_LINT_FAILED == 'true' || steps.lint.outputs.FM_LINT_FAILED == 'true'
        env:
          CRLF_FAILED: ${{ steps.lint.outputs.CRLF_FAILED }}
          MD_LINT_FAILED: ${{ steps.lint.outputs.MD_LINT_FAILED }}
          FM_LINT_FAILED: ${{ steps.lint.outputs.FM_LINT_FAILED }}
          PRETTIER_FAILED: ${{ steps.lint.outputs.PRETTIER_FAILED }}
          CRLF_LOG: ${{ steps.lint.outputs.CRLF_LOG }}
          MD_LINT_LOG: ${{ steps.lint.outputs.MD_LINT_LOG }}
          FM_LINT_LOG: ${{ steps.lint.outputs.FM_LINT_LOG }}
          PRETTIER_LOG: ${{ steps.lint.outputs.PRETTIER_LOG }}
        run: |
          echo -e "\n🚨 Linting issues found. Please fix the following before merging:\n"

          if [[ ${CRLF_FAILED} == 'true' ]]; then
            echo "❌ CRLF line endings detected:"
            echo "${CRLF_LOG}"
            echo "- Use LF endings instead. [More info](https://gist.github.com/LunarLambda/3df0840b336a5e314e4ffdac03cbf619)"
            echo "- Convert online: https://app.execeratics.com/LFandCRLFonline/?l=en"
          fi

          if [[ ${MD_LINT_FAILED} == 'true' ]]; then
            echo -e "\n❌ markdownlint issues:"
            echo "${MD_LINT_LOG}"
          fi

          if [[ ${FM_LINT_FAILED} == 'true' ]]; then
            echo -e "\n❌ Front-matter lint issues:"
            echo "${FM_LINT_LOG}"
          fi

          if [[ ${PRETTIER_FAILED} == 'true' ]]; then
            echo -e "\n❌ Prettier formatting issues:"
            echo "${PRETTIER_LOG}"
            echo "- Try fixing with: yarn prettier -w <files>"
          fi

          exit 1


          if [[ ${PRETTIER_FAILED} == 'true' ]]; then
            echo -e "\n\n🪵 Logs from Prettier formatter:"
            echo "${PRETTIER_LOG}"
            echo -e "\nYou can use Prettier playground to format the files online (configuration pre-filled): https://prettier.io/playground/#N4Igxg9gdgLgprEAuEBiABABwIYGd7owAWc6CMAlgE6kBmFANqSTSADQgSaXS7KjYqVCAHcACoIR8U2BiOwBPPhwBGVbGADWcGAGVsAWzgAZClDjIYVAK5xV6rTt04wZgOaWbdkLjgGKnrYccAAemHBUFEawsgAqEVCCFHDStLK+HLjuTACK1hDwyGkMGSAAVrghutlweQUWSMWlAI758GLCmNIgeAC05nAAJkPsIFbYjO4AwhAGBtjIPQwMo1lQbkwAgjBWFCrW7RGm5kXp3kQwBgwA6kQU8LgucLpS9xQAbvcKi2C4yiDvWwASSgw1gujAkW4m1BuhgCiYpxK3kwwl813UmEWqJSEXeFg4Zl8VBgHWwbnmSNKOCoxMW8yomkGoigo1RZhg1wog2IyAAHAAGDg0VrUOBkikLRpnDgwbAqLk8ojIABMHGsvli8tSMpAfhUQ2Gg2M2HW1nJcAAYhAqPMdu5FtgDhAQABfV1AA \n"
          fi

          exit 1
